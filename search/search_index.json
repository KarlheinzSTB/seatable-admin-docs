{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes. Main features includes: A spreadsheet like interface to records data supporting collaboratively editing. A form app to collect data from outside. Mobile ready UI to be used on browsers in mobile system to view and collect data. Comprehensive API and SDK for adding extensions. Filters, sorts, charts and pivotal tables to visualize and analyze data. Software components \u00b6 SeaTable consists of following component dtable-web: The web site for manage tables. dtable-server: Store the tables and provide collaborating feature. dtable-events: Background tasks likes email sending and so on. seaf-server: Store attachments (files and images) The following picture shows how the different components work together: Some explanation: MariaDB, Memcache, Redis are running in their own docker containers. Redis is used for sending messages from dtable-web/dtable-server to dtable-events All the components use Memcache for storing cache and MariaDB for storing permanent information Bases are maintained in dtable-server and periodically saved to file/objects storage for persistent storage. Attachments are saved in file/objects storage LICENSE \u00b6 SeaTable has three versions Developer edition: for users that want to use SeaTable as database and heavy using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server. Cloud edition: for users that want to use SeaTable as a collaboration tool. It has limitation for storage, row numbers and API calls. Enterprise edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both way. Users can use it in the cloud or self-hosted. The different components of SeaTable developer edition are released under different licenses: dtable-web: Apache License v2 dtable-events: Apache License v2 dtable-server: Proprietary License seaf-server: AGPLv3 SeaTabe developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including Use it internally in your company. Personal or home use. Use it to collaborate with your customers. Use it for IT projects for your customers, as long as you use a separate server for each of your customers. The SeaTable enterprise edition is released under proprietary license. Report issues \u00b6 Please report issues to our forum https://forum.seatable.io/ More information \u00b6 GitHub: https://github.com/seatable/seatable","title":"Introduction"},{"location":"#introduction","text":"SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes. Main features includes: A spreadsheet like interface to records data supporting collaboratively editing. A form app to collect data from outside. Mobile ready UI to be used on browsers in mobile system to view and collect data. Comprehensive API and SDK for adding extensions. Filters, sorts, charts and pivotal tables to visualize and analyze data.","title":"Introduction"},{"location":"#software-components","text":"SeaTable consists of following component dtable-web: The web site for manage tables. dtable-server: Store the tables and provide collaborating feature. dtable-events: Background tasks likes email sending and so on. seaf-server: Store attachments (files and images) The following picture shows how the different components work together: Some explanation: MariaDB, Memcache, Redis are running in their own docker containers. Redis is used for sending messages from dtable-web/dtable-server to dtable-events All the components use Memcache for storing cache and MariaDB for storing permanent information Bases are maintained in dtable-server and periodically saved to file/objects storage for persistent storage. Attachments are saved in file/objects storage","title":"Software components"},{"location":"#license","text":"SeaTable has three versions Developer edition: for users that want to use SeaTable as database and heavy using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server. Cloud edition: for users that want to use SeaTable as a collaboration tool. It has limitation for storage, row numbers and API calls. Enterprise edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both way. Users can use it in the cloud or self-hosted. The different components of SeaTable developer edition are released under different licenses: dtable-web: Apache License v2 dtable-events: Apache License v2 dtable-server: Proprietary License seaf-server: AGPLv3 SeaTabe developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including Use it internally in your company. Personal or home use. Use it to collaborate with your customers. Use it for IT projects for your customers, as long as you use a separate server for each of your customers. The SeaTable enterprise edition is released under proprietary license.","title":"LICENSE"},{"location":"#report-issues","text":"Please report issues to our forum https://forum.seatable.io/","title":"Report issues"},{"location":"#more-information","text":"GitHub: https://github.com/seatable/seatable","title":"More information"},{"location":"dtable-server-license/","text":"End User License Agreement for dtable-server Version: September 2020 1. Parties and Subject Matter \u00b6 The provisions of this End User License Agreement (\"EULA\") govern the relationship between Seafile Ltd., GuiGuLiangCheng, Block 2B, #310, HaiDian District, Beijing, China (\"Seafile\") and end users (\"End Users\") (collectively the \"Parties\") with respect to the licensing by Seafile of the software dtable-server (\"Server\" of \"Software\"). A License Agreement between the Parties pursuant to this EULA is concluded when the End User downloads the Server, alone or bundled with other software. IF YOU DO NOT AGREE TO THIS EULA, DO NOT DOWNLOAD, INSTALL AND USE THE SERVER. The same applies for the software with which the Server is bundled. 2. Changes to the EULA \u00b6 Seafile is entitled to amend this EULA. SeaTable posts the amended EULA on the website https://seatable.io no less than two months before it becomes effective. The End User is therefore advised to visit this EULA regularly and to check for amendments. IF YOU DO NOT AGREE TO THE AMENDED EULA, QUIT USING THE SERVER AND UNINSTALL IT. The same applies for the software with which the Server is bundled. 3. Product Specification, Availability and Updates \u00b6 The Server is a software developed by Seafile. Its functions and its requirements are described on the website https://seatable.io; technical details are provided in the administrator manual. The Server can be used free of charge. The Server is made available to the End User by download, bundled with other software in the form of the application SeaTable Community Edition (\"SeaTable CE\"), of which the Server is a key component and without which SeaTable CE is not functional. This applies for installation media as well as updates. The End User is responsible for installation and configuration. Seafile does not offer any kind of support for the Server nor has the End User any claim. Seafile and its affiliates operate a Community Forum at https://forum.seatable.io where End Users can help one another. Seafile will regularly release new versions of the Server. At its sole discretion, it may add/modify/remove functions and features and/or supported platforms. Seafile informs about new releases and associated changes on its blog and in the Community Forum. Seafile may also decide, at its discretion, to discontinue the development of the Server. Some functions and features of the Server may depend on third-party products and services, all of which may be subject to changes. As a consequence, Seafile may need to modify or limit functions and features of the Server. 5. Rights of Use \u00b6 Seafile grants to the End User the non-exclusive, non-transferable and non-sublicensable right to install, run and use the Server to the extent granted by this EULA. The rights of use, granted under this EULA, are unlimited in time as long as the End User agrees to this EULA. Any use of the Server beyond the scope granted under this EULA is prohibited and may be prosecuted. The rights of use, granted pursuant to this EULA, do not include any rights to the source code of the Server. The rights, granted pursuant to this EULA, do not include and the End User is not entitled to and shall not allow a third party to (I) attempt to circumvent any technical measures and devices of the Server that are directed at, or have the effect of, enforcing this EULA and its terms; (II) modify, create derivative works, translate, decompile or create or attempt to create, by reverse engineering or otherwise, the source code of the Server; (III) remove, modify or obscure any copyright, trademark, service mark or other proprietary rights, confidentiality, serial number, notice, legend or similar on any copy of the Server, or related data, manuals, documentation or other materials; (IV) market, sell, lend, rent, lease or distribute the Server; (V) use the Server, on its own or as a part of another product and irrespective of the delivery model, for creating or providing a commercial service or a free public or de-facto public service; and (VI) assign, sublicense or otherwise transfer any rights in or to the Server. Seafile retains all right, title and interest in and to the Server (and any new versions thereof provided by Seafile) and in all copies, modifications and derivative works of the Server including, without limitation, all rights to patent, copyright, trade secret, trademark and other proprietary or intellectual property rights. 6. Documentation and Interfaces \u00b6 Seafile and its affiliates provide an online user and administrator manual in English on the website https://seatable.io. Any further languages may be offered by Seafile on a voluntary basis. Seafile retains all right, title and interest in and to such documentation and in all copies, modifications and derivative works thereof. The Server may, at Seafile's sole discretion, provide application programming interfaces or other software interfaces (collectively \"API\") that allow third-party or customer applications to communicate with the Server (collectively \"third-party software\"). Seafile may change or discontinue APIs at any time without any obligation or liability to the End User. The respective provider is responsible for the third-party software. The provisions of the EULA do not apply to any such third-party software. Under no circumstances is Seafile liable for any third-party software. 7. Obligations and Duties of the End User \u00b6 The End User is obliged to use the Server only in accordance with the provisions of this EULA and in accordance with laws and regulations applicable to such use and may not infringe on any third-party rights in connection with such use. The End User must, in particular, comply with all applicable data protection and export control provisions. The requirements for the Server are specified in the administrator manual. The End User familiarizes himself/hersef with these requirements prior to download, installation and use of the Server. The End User reports errors and bugs (\"Defects\") on the Community Forum. The report of any Defect must include a detailed description of the defect, instructions to reproduce it, the relevant logs, the Software's version and the operating system and version. If a Defect occured when accessing the Software via a browser, the report must additionally include browser type and version, screenshots of the defect and the content of browser console. 8. Data Privacy \u00b6 Seafile collects, processes and uses personal data of the End User as described in detail in the Privacy Statement. Non-personal or anonymous data may be collected automatically to improve functionality and the user experience with the Server. The End User agrees that Seafile owns all rights in, and is free to use any such non-personal or anonymous data in any way it deems fit for development, diagnostic, corrective as well as marketing or any other purposes. 9. Limitation of Liability \u00b6 IN NO EVENT, UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, WILL SEAFILE BE LIABLE TO END USERS FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THE END USER OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SEAFILE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 10. Warranty Claims \u00b6 THERE IS NO WARRANTY FOR THE SERVER, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH THE END USER. SHOULD THE PROGRAM PROVE DEFECTIVE, THE END USER ASSUMES THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 11. Final Provisions \u00b6 Any notifications and declarations in connection with the EULA will be made through public announcements on the website https://seatable.io and/or the Community Forum at https://forum.seatable.io. The End User is responsible for checking these two sites regularly. The EULA and any disputes in connection with it are solely governed by, and construed in accordance with, the law of the People's Republic of China. The exclusive place of jurisdiction is Beijing, China. Seafile reserves the right to sue at the End User\u2019s head office. If a provision of the EULA is found to be partly or wholly invalid or unenforceable, this shall not affect the validity and enforceablity of the remaining providions of the EULA. In place of the invalid or unenforceable provision, a valid and enforceable provision shall apply which reflects as closely as possible the commercial intention of the parties as regards the invalid or unenforceable provision.","title":"dtable-server-license"},{"location":"dtable-server-license/#1-parties-and-subject-matter","text":"The provisions of this End User License Agreement (\"EULA\") govern the relationship between Seafile Ltd., GuiGuLiangCheng, Block 2B, #310, HaiDian District, Beijing, China (\"Seafile\") and end users (\"End Users\") (collectively the \"Parties\") with respect to the licensing by Seafile of the software dtable-server (\"Server\" of \"Software\"). A License Agreement between the Parties pursuant to this EULA is concluded when the End User downloads the Server, alone or bundled with other software. IF YOU DO NOT AGREE TO THIS EULA, DO NOT DOWNLOAD, INSTALL AND USE THE SERVER. The same applies for the software with which the Server is bundled.","title":"1. Parties and Subject Matter"},{"location":"dtable-server-license/#2-changes-to-the-eula","text":"Seafile is entitled to amend this EULA. SeaTable posts the amended EULA on the website https://seatable.io no less than two months before it becomes effective. The End User is therefore advised to visit this EULA regularly and to check for amendments. IF YOU DO NOT AGREE TO THE AMENDED EULA, QUIT USING THE SERVER AND UNINSTALL IT. The same applies for the software with which the Server is bundled.","title":"2. Changes to the EULA"},{"location":"dtable-server-license/#3-product-specification-availability-and-updates","text":"The Server is a software developed by Seafile. Its functions and its requirements are described on the website https://seatable.io; technical details are provided in the administrator manual. The Server can be used free of charge. The Server is made available to the End User by download, bundled with other software in the form of the application SeaTable Community Edition (\"SeaTable CE\"), of which the Server is a key component and without which SeaTable CE is not functional. This applies for installation media as well as updates. The End User is responsible for installation and configuration. Seafile does not offer any kind of support for the Server nor has the End User any claim. Seafile and its affiliates operate a Community Forum at https://forum.seatable.io where End Users can help one another. Seafile will regularly release new versions of the Server. At its sole discretion, it may add/modify/remove functions and features and/or supported platforms. Seafile informs about new releases and associated changes on its blog and in the Community Forum. Seafile may also decide, at its discretion, to discontinue the development of the Server. Some functions and features of the Server may depend on third-party products and services, all of which may be subject to changes. As a consequence, Seafile may need to modify or limit functions and features of the Server.","title":"3. Product Specification, Availability and Updates"},{"location":"dtable-server-license/#5-rights-of-use","text":"Seafile grants to the End User the non-exclusive, non-transferable and non-sublicensable right to install, run and use the Server to the extent granted by this EULA. The rights of use, granted under this EULA, are unlimited in time as long as the End User agrees to this EULA. Any use of the Server beyond the scope granted under this EULA is prohibited and may be prosecuted. The rights of use, granted pursuant to this EULA, do not include any rights to the source code of the Server. The rights, granted pursuant to this EULA, do not include and the End User is not entitled to and shall not allow a third party to (I) attempt to circumvent any technical measures and devices of the Server that are directed at, or have the effect of, enforcing this EULA and its terms; (II) modify, create derivative works, translate, decompile or create or attempt to create, by reverse engineering or otherwise, the source code of the Server; (III) remove, modify or obscure any copyright, trademark, service mark or other proprietary rights, confidentiality, serial number, notice, legend or similar on any copy of the Server, or related data, manuals, documentation or other materials; (IV) market, sell, lend, rent, lease or distribute the Server; (V) use the Server, on its own or as a part of another product and irrespective of the delivery model, for creating or providing a commercial service or a free public or de-facto public service; and (VI) assign, sublicense or otherwise transfer any rights in or to the Server. Seafile retains all right, title and interest in and to the Server (and any new versions thereof provided by Seafile) and in all copies, modifications and derivative works of the Server including, without limitation, all rights to patent, copyright, trade secret, trademark and other proprietary or intellectual property rights.","title":"5. Rights of Use"},{"location":"dtable-server-license/#6-documentation-and-interfaces","text":"Seafile and its affiliates provide an online user and administrator manual in English on the website https://seatable.io. Any further languages may be offered by Seafile on a voluntary basis. Seafile retains all right, title and interest in and to such documentation and in all copies, modifications and derivative works thereof. The Server may, at Seafile's sole discretion, provide application programming interfaces or other software interfaces (collectively \"API\") that allow third-party or customer applications to communicate with the Server (collectively \"third-party software\"). Seafile may change or discontinue APIs at any time without any obligation or liability to the End User. The respective provider is responsible for the third-party software. The provisions of the EULA do not apply to any such third-party software. Under no circumstances is Seafile liable for any third-party software.","title":"6. Documentation and Interfaces"},{"location":"dtable-server-license/#7-obligations-and-duties-of-the-end-user","text":"The End User is obliged to use the Server only in accordance with the provisions of this EULA and in accordance with laws and regulations applicable to such use and may not infringe on any third-party rights in connection with such use. The End User must, in particular, comply with all applicable data protection and export control provisions. The requirements for the Server are specified in the administrator manual. The End User familiarizes himself/hersef with these requirements prior to download, installation and use of the Server. The End User reports errors and bugs (\"Defects\") on the Community Forum. The report of any Defect must include a detailed description of the defect, instructions to reproduce it, the relevant logs, the Software's version and the operating system and version. If a Defect occured when accessing the Software via a browser, the report must additionally include browser type and version, screenshots of the defect and the content of browser console.","title":"7. Obligations and Duties of the End User"},{"location":"dtable-server-license/#8-data-privacy","text":"Seafile collects, processes and uses personal data of the End User as described in detail in the Privacy Statement. Non-personal or anonymous data may be collected automatically to improve functionality and the user experience with the Server. The End User agrees that Seafile owns all rights in, and is free to use any such non-personal or anonymous data in any way it deems fit for development, diagnostic, corrective as well as marketing or any other purposes.","title":"8. Data Privacy"},{"location":"dtable-server-license/#9-limitation-of-liability","text":"IN NO EVENT, UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, WILL SEAFILE BE LIABLE TO END USERS FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THE END USER OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SEAFILE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"9. Limitation of Liability"},{"location":"dtable-server-license/#10-warranty-claims","text":"THERE IS NO WARRANTY FOR THE SERVER, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH THE END USER. SHOULD THE PROGRAM PROVE DEFECTIVE, THE END USER ASSUMES THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"10. Warranty Claims"},{"location":"dtable-server-license/#11-final-provisions","text":"Any notifications and declarations in connection with the EULA will be made through public announcements on the website https://seatable.io and/or the Community Forum at https://forum.seatable.io. The End User is responsible for checking these two sites regularly. The EULA and any disputes in connection with it are solely governed by, and construed in accordance with, the law of the People's Republic of China. The exclusive place of jurisdiction is Beijing, China. Seafile reserves the right to sue at the End User\u2019s head office. If a provision of the EULA is found to be partly or wholly invalid or unenforceable, this shall not affect the validity and enforceablity of the remaining providions of the EULA. In place of the invalid or unenforceable provision, a valid and enforceable provision shall apply which reflects as closely as possible the commercial intention of the parties as regards the invalid or unenforceable provision.","title":"11. Final Provisions"},{"location":"home/","text":"Introduction \u00b6 SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes. Main features includes: A spreadsheet like interface to records data supporting collaboratively editing. A form app to collect data from outside. Mobile ready UI to be used on browsers in mobile system to view and collect data. Comprehensive API and SDK for adding extensions. Filters, sorts, charts and pivotal tables to visualize and analyze data. Software components \u00b6 SeaTable consists of following component dtable-web: The web site for manage tables. dtable-server: Store the tables and provide collaborating feature. dtable-events: Background tasks likes email sending and so on. seaf-server: Store attachments (files and images) dtable-db: Provides SQL interface and archiving The following picture shows how the different components work together: Some explanation: MariaDB, Memcache, Redis are running in their own docker containers. ccnet-server is currently only used for query users/groups from database, which will be merged into seaf-server. Redis is used for sending messages from dtable-web/dtable-server to dtable-events All the components use Memcache for storing cache and MariaDB for storing permanent information Bases are maintained in dtable-server and periodically saved to file/objects storage for persistent storage. Attachments are saved in file/objects storage LICENSE \u00b6 SeaTable has three versions Developer edition: for users that want to use SeaTable as database and heavy using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server. Cloud edition: for users that want to use SeaTable as a collaboration tool. It has limitation for storage, row numbers and API calls. Enterprise edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both way. Users can use it in the cloud or self-hosted. The different components of SeaTable developer edition are released under different licenses: dtable-web: Apache License v2 dtable-events: Apache License v2 dtable-server: Proprietary License seaf-server: AGPLv3 dtable-db: Proprietary License SeaTabe developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including Use it internally in your company. Personal or home use. Use it to collaborate with your customers. Use it for IT projects for your customers, as long as you use a separate server for each of your customers. The SeaTable enterprise edition is released under proprietary license. Report issues \u00b6 Please report issues to our forum https://forum.seatable.io/ More information \u00b6 GitHub: https://github.com/seatable/seatable","title":"Overview"},{"location":"home/#introduction","text":"SeaTable is an online lightweight database with a spreadsheet interface. It helps you to easily record and manage all kinds of scattered information. With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes. Main features includes: A spreadsheet like interface to records data supporting collaboratively editing. A form app to collect data from outside. Mobile ready UI to be used on browsers in mobile system to view and collect data. Comprehensive API and SDK for adding extensions. Filters, sorts, charts and pivotal tables to visualize and analyze data.","title":"Introduction"},{"location":"home/#software-components","text":"SeaTable consists of following component dtable-web: The web site for manage tables. dtable-server: Store the tables and provide collaborating feature. dtable-events: Background tasks likes email sending and so on. seaf-server: Store attachments (files and images) dtable-db: Provides SQL interface and archiving The following picture shows how the different components work together: Some explanation: MariaDB, Memcache, Redis are running in their own docker containers. ccnet-server is currently only used for query users/groups from database, which will be merged into seaf-server. Redis is used for sending messages from dtable-web/dtable-server to dtable-events All the components use Memcache for storing cache and MariaDB for storing permanent information Bases are maintained in dtable-server and periodically saved to file/objects storage for persistent storage. Attachments are saved in file/objects storage","title":"Software components"},{"location":"home/#license","text":"SeaTable has three versions Developer edition: for users that want to use SeaTable as database and heavy using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server. Cloud edition: for users that want to use SeaTable as a collaboration tool. It has limitation for storage, row numbers and API calls. Enterprise edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both way. Users can use it in the cloud or self-hosted. The different components of SeaTable developer edition are released under different licenses: dtable-web: Apache License v2 dtable-events: Apache License v2 dtable-server: Proprietary License seaf-server: AGPLv3 dtable-db: Proprietary License SeaTabe developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including Use it internally in your company. Personal or home use. Use it to collaborate with your customers. Use it for IT projects for your customers, as long as you use a separate server for each of your customers. The SeaTable enterprise edition is released under proprietary license.","title":"LICENSE"},{"location":"home/#report-issues","text":"Please report issues to our forum https://forum.seatable.io/","title":"Report issues"},{"location":"home/#more-information","text":"GitHub: https://github.com/seatable/seatable","title":"More information"},{"location":"changelog/changelog-for-seatable-professional-server/","text":"SeaTable Enterprise Edition Changelog \u00b6 Please check: https://seatable.io/docs/changelog/","title":"SeaTable Enterprise Edition"},{"location":"changelog/changelog-for-seatable-professional-server/#seatable-enterprise-edition-changelog","text":"Please check: https://seatable.io/docs/changelog/","title":"SeaTable Enterprise Edition Changelog"},{"location":"changelog/roadmap/","text":"Roadmap \u00b6 You can find SeaTable roadmap here: https://cloud.seatable.io/dtable/external-links/custom/seatable-roadmap/","title":"Roadmap"},{"location":"changelog/roadmap/#roadmap","text":"You can find SeaTable roadmap here: https://cloud.seatable.io/dtable/external-links/custom/seatable-roadmap/","title":"Roadmap"},{"location":"changelog/server-changelog/","text":"SeaTable Developer Edition Changelog \u00b6 Please see https://seatable.io/docs/changelog/","title":"SeaTable Developer Edition"},{"location":"changelog/server-changelog/#seatable-developer-edition-changelog","text":"Please see https://seatable.io/docs/changelog/","title":"SeaTable Developer Edition Changelog"},{"location":"config/ccnet-conf/","text":"ccnet.conf \u00b6 Ccnet is the internal RPC framework used by Seafile server and also manages the user database. A few useful options are in ccnet.conf. [General] # The config has no effect. But is needed now. SERVICE_URL=http://www.example.com Changing MariaDB Connection Pool Size \u00b6 When you configure ccnet to use MariaDB, the default connection pool size is 100, which should be enough for most use cases. You can change this value by adding following options to ccnet.conf: [Database] ...... # Use larger connection pool MAX_CONNECTIONS = 200","title":"ccnet.conf"},{"location":"config/ccnet-conf/#ccnetconf","text":"Ccnet is the internal RPC framework used by Seafile server and also manages the user database. A few useful options are in ccnet.conf. [General] # The config has no effect. But is needed now. SERVICE_URL=http://www.example.com","title":"ccnet.conf"},{"location":"config/ccnet-conf/#changing-mariadb-connection-pool-size","text":"When you configure ccnet to use MariaDB, the default connection pool size is 100, which should be enough for most use cases. You can change this value by adding following options to ccnet.conf: [Database] ...... # Use larger connection pool MAX_CONNECTIONS = 200","title":"Changing MariaDB Connection Pool Size"},{"location":"config/customize_email_notifications/","text":"Customize Email Notifications \u00b6 Note: Subject line may vary between different releases, this is based on Release 2.0.1. Restart Seahub so that your changes take effect. User reset his/her password \u00b6 Subject seahub/seahub/auth/forms.py line:103 Body seahub/seahub/templates/registration/password_reset_email.html Note: You can copy password_reset_email.html to seahub-data/custom/templates/registration/password_reset_email.html and modify the new one. In this way, the customization will be maintained after upgrade. System admin add new member \u00b6 Subject seahub/seahub/views/sysadmin.py line:424 Body seahub/seahub/templates/sysadmin/user_add_email.html Note: You can copy user_add_email.html to seahub-data/custom/templates/sysadmin/user_add_email.html and modify the new one. In this way, the customization will be maintained after upgrade. System admin reset user password \u00b6 Subject seahub/seahub/views/sysadmin.py line:368 Body seahub/seahub/templates/sysadmin/user_reset_email.html Note: You can copy user_reset_email.html to seahub-data/custom/templates/sysadmin/user_reset_email.html and modify the new one. In this way, the customization will be maintained after upgrade. User send file/folder share link \u00b6 Subject seahub/seahub/share/views.py line:668 Body seahub/seahub/templates/shared_link_email.html","title":"Customize Email Notifications"},{"location":"config/customize_email_notifications/#customize-email-notifications","text":"Note: Subject line may vary between different releases, this is based on Release 2.0.1. Restart Seahub so that your changes take effect.","title":"Customize Email Notifications"},{"location":"config/customize_email_notifications/#user-reset-hisher-password","text":"Subject seahub/seahub/auth/forms.py line:103 Body seahub/seahub/templates/registration/password_reset_email.html Note: You can copy password_reset_email.html to seahub-data/custom/templates/registration/password_reset_email.html and modify the new one. In this way, the customization will be maintained after upgrade.","title":"User reset his/her password"},{"location":"config/customize_email_notifications/#system-admin-add-new-member","text":"Subject seahub/seahub/views/sysadmin.py line:424 Body seahub/seahub/templates/sysadmin/user_add_email.html Note: You can copy user_add_email.html to seahub-data/custom/templates/sysadmin/user_add_email.html and modify the new one. In this way, the customization will be maintained after upgrade.","title":"System admin add new member"},{"location":"config/customize_email_notifications/#system-admin-reset-user-password","text":"Subject seahub/seahub/views/sysadmin.py line:368 Body seahub/seahub/templates/sysadmin/user_reset_email.html Note: You can copy user_reset_email.html to seahub-data/custom/templates/sysadmin/user_reset_email.html and modify the new one. In this way, the customization will be maintained after upgrade.","title":"System admin reset user password"},{"location":"config/customize_email_notifications/#user-send-filefolder-share-link","text":"Subject seahub/seahub/share/views.py line:668 Body seahub/seahub/templates/shared_link_email.html","title":"User send file/folder share link"},{"location":"config/dtable-events-conf/","text":"dtable-event.conf settings \u00b6 Database configuration \u00b6 The configuration of database is in the [DATABASE] section of the file dtable-events.conf [DATABASE] type = mysql host = db port = 3306 username = root password = seatable_db db_name = seafile_db Note: MariaDB and MySQL is compatible. In the configuration, we use mysql. Redis configuration \u00b6 The configuration of redis is in the [REDIS] section of the file dtable-events.conf [REDIS] host = redis port = 6379 Email notifications configuration \u00b6 The configuration of email notifications is in the [EMAIL SENDER] section of the file dtable-events.conf [EMAIL SENDER] enabled = true Notification rules scanner configuration \u00b6 Notification rules is the feature that users can set notification rules for a base and got notifications when defined criteria meet. The configuration of notification rules scanner is in the [NOTIFY-SCANNER] section of the file dtable-events.conf [NOTIFY-SCANNER] enabled = true interval = 3600","title":"dtable-events.conf"},{"location":"config/dtable-events-conf/#dtable-eventconf-settings","text":"","title":"dtable-event.conf settings"},{"location":"config/dtable-events-conf/#database-configuration","text":"The configuration of database is in the [DATABASE] section of the file dtable-events.conf [DATABASE] type = mysql host = db port = 3306 username = root password = seatable_db db_name = seafile_db Note: MariaDB and MySQL is compatible. In the configuration, we use mysql.","title":"Database configuration"},{"location":"config/dtable-events-conf/#redis-configuration","text":"The configuration of redis is in the [REDIS] section of the file dtable-events.conf [REDIS] host = redis port = 6379","title":"Redis configuration"},{"location":"config/dtable-events-conf/#email-notifications-configuration","text":"The configuration of email notifications is in the [EMAIL SENDER] section of the file dtable-events.conf [EMAIL SENDER] enabled = true","title":"Email notifications configuration"},{"location":"config/dtable-events-conf/#notification-rules-scanner-configuration","text":"Notification rules is the feature that users can set notification rules for a base and got notifications when defined criteria meet. The configuration of notification rules scanner is in the [NOTIFY-SCANNER] section of the file dtable-events.conf [NOTIFY-SCANNER] enabled = true interval = 3600","title":"Notification rules scanner configuration"},{"location":"config/dtable_db_conf/","text":"dtable-db config \u00b6 dtable-db is the component that provides SQL querying capability in SeaTable server. Users can query their bases with SQL. It also handles archiving for large bases (since Enterprise Edition 2.3.0), to make querying large bases more efficient. Configurations \u00b6 The configurations are in dtable_db.conf. Below are available options. In section [general] : host : The address dtable-db listens on. Defaults to 0.0.0.0. port : The port dtable-db listens on. Defaults to 7777. log_dir : Location for the logs. Defaults to the directory specified in -c command line option. (Added in 2.3.0) slow_query_threshold : If the processing time exceeds this threshold, a slow log will be recorded. Unit is in milliseconds. Defaults to 1000. (Added in 2.3.0) In section [storage] : data_dir : Location of the data directory. You must specify this option. Section [dtable cache] contains options for caching bases from dtable-server: private_key : The same as DTABLE_PRIVATE_KEY in dtable_web_settings.py . You must specify this option. dtable_server_url : local address for dtable-server. You must specify this option. expire_time : For how long a cached base will be valid. After that it'll be fetched from dtable-server again. Unit is in seconds. Defaults to 300 (5 minutes). total_cache_size : How much memory shall be used for caching bases. After this threshold is reached, cached bases will be cleaned with LRU algorithm. Cleaning stops when memory consumption reduces to 70% of this threshold. Unit is in MB. Defaults to 500MB. clean_cache_interval : Interval between cache cleaning. Unit is in seconds. Defaults to 300. Section [database] contains options for accessing the MySQL database used by dtable-server. host : Address of database. You must provide this option. port : Port of database. Defaults to 3306. user : Username for login to the database. You must provide this option. password : Password for the database user. You must provide this option. db_name : Database name used by dtable-server. You must provide this option. In section [SQL] : max_result_rows : Maximal number of rows that will be returned in one query, if LIMIT syntax is not used. Defaults to 100. Below is an example configuration: [general] host = 127.0.0.1 port = 7777 log_dir = /shared/seatable/logs [storage] data_dir = /opt/seatable/db-data # You have to change private_key and dtable_server_url based on your conf/dtable-server.json [dtable cache] private_key = \"my private key\" dtable_server_url = \"http://127.0.0.1:5000\" total_cache_size = 100 # You have to change below options based on your conf/dtable-server.json [database] host = 127.0.0.1 user = root password = mypass db_name = dtable","title":"dtable-db.conf"},{"location":"config/dtable_db_conf/#dtable-db-config","text":"dtable-db is the component that provides SQL querying capability in SeaTable server. Users can query their bases with SQL. It also handles archiving for large bases (since Enterprise Edition 2.3.0), to make querying large bases more efficient.","title":"dtable-db config"},{"location":"config/dtable_db_conf/#configurations","text":"The configurations are in dtable_db.conf. Below are available options. In section [general] : host : The address dtable-db listens on. Defaults to 0.0.0.0. port : The port dtable-db listens on. Defaults to 7777. log_dir : Location for the logs. Defaults to the directory specified in -c command line option. (Added in 2.3.0) slow_query_threshold : If the processing time exceeds this threshold, a slow log will be recorded. Unit is in milliseconds. Defaults to 1000. (Added in 2.3.0) In section [storage] : data_dir : Location of the data directory. You must specify this option. Section [dtable cache] contains options for caching bases from dtable-server: private_key : The same as DTABLE_PRIVATE_KEY in dtable_web_settings.py . You must specify this option. dtable_server_url : local address for dtable-server. You must specify this option. expire_time : For how long a cached base will be valid. After that it'll be fetched from dtable-server again. Unit is in seconds. Defaults to 300 (5 minutes). total_cache_size : How much memory shall be used for caching bases. After this threshold is reached, cached bases will be cleaned with LRU algorithm. Cleaning stops when memory consumption reduces to 70% of this threshold. Unit is in MB. Defaults to 500MB. clean_cache_interval : Interval between cache cleaning. Unit is in seconds. Defaults to 300. Section [database] contains options for accessing the MySQL database used by dtable-server. host : Address of database. You must provide this option. port : Port of database. Defaults to 3306. user : Username for login to the database. You must provide this option. password : Password for the database user. You must provide this option. db_name : Database name used by dtable-server. You must provide this option. In section [SQL] : max_result_rows : Maximal number of rows that will be returned in one query, if LIMIT syntax is not used. Defaults to 100. Below is an example configuration: [general] host = 127.0.0.1 port = 7777 log_dir = /shared/seatable/logs [storage] data_dir = /opt/seatable/db-data # You have to change private_key and dtable_server_url based on your conf/dtable-server.json [dtable cache] private_key = \"my private key\" dtable_server_url = \"http://127.0.0.1:5000\" total_cache_size = 100 # You have to change below options based on your conf/dtable-server.json [database] host = 127.0.0.1 user = root password = mypass db_name = dtable","title":"Configurations"},{"location":"config/dtable_server_config/","text":"DTable Server Config \u00b6 { \"host\": \"db\", \"user\": \"root\", \"password\": \"MYSQL_PASSWORD\", \"database\": \"dtable_db\", \"port\": 3306, \"private_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"dtable_web_service_url\": \"https://example.seatable.com/\", \"redis_host\": \"redis\", \"redis_port\": 6379, \"redis_password\": \"\", \"enable_notification_publish\": true/false, \"api_req_max\": 6000, \"rows_api_minute_max\": 100, \"rows_api_hour_max\": 6000, \"worker_threads_num\": 2 } redis_password \u00b6 It is an empty string private_key \u00b6 It must be the same as the DTABLE_PRIVATE_KEY in dtable_web_settings.py dtable_web_service_url \u00b6 It is used for dtable-server to access dtable-web. It is optional since 1.1.0. If it is not specified, 127.0.0.1:8000 will be used. enable_notification_publish \u00b6 It is used for publishing the notification to the \"notification-added\" channel of redis, default by false. This is designed for the integration to the third-party application which will be able to receive the real-time notification. api_req_max \u00b6 The maximum number of API calls for for base within 1 minute. The default value is 6000. rows_api_minute_max / rows_api_hour_max \u00b6 The maximum number of listing rows API calls within 1 minute / hour. Listing rows in a large base involving converting internal representation to end-user friendly representation, which will cost a few seconds for 10K+ rows. So the API should be limited more than other APIs. worker_threads_num \u00b6 Number of worker threads serving list rows API Notice \u00b6 You should restart the SeaTable after the modification of these settings by run the code below: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"dtable_server_config"},{"location":"config/dtable_server_config/#dtable-server-config","text":"{ \"host\": \"db\", \"user\": \"root\", \"password\": \"MYSQL_PASSWORD\", \"database\": \"dtable_db\", \"port\": 3306, \"private_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"dtable_web_service_url\": \"https://example.seatable.com/\", \"redis_host\": \"redis\", \"redis_port\": 6379, \"redis_password\": \"\", \"enable_notification_publish\": true/false, \"api_req_max\": 6000, \"rows_api_minute_max\": 100, \"rows_api_hour_max\": 6000, \"worker_threads_num\": 2 }","title":"DTable Server Config"},{"location":"config/dtable_server_config/#redis_password","text":"It is an empty string","title":"redis_password"},{"location":"config/dtable_server_config/#private_key","text":"It must be the same as the DTABLE_PRIVATE_KEY in dtable_web_settings.py","title":"private_key"},{"location":"config/dtable_server_config/#dtable_web_service_url","text":"It is used for dtable-server to access dtable-web. It is optional since 1.1.0. If it is not specified, 127.0.0.1:8000 will be used.","title":"dtable_web_service_url"},{"location":"config/dtable_server_config/#enable_notification_publish","text":"It is used for publishing the notification to the \"notification-added\" channel of redis, default by false. This is designed for the integration to the third-party application which will be able to receive the real-time notification.","title":"enable_notification_publish"},{"location":"config/dtable_server_config/#api_req_max","text":"The maximum number of API calls for for base within 1 minute. The default value is 6000.","title":"api_req_max"},{"location":"config/dtable_server_config/#rows_api_minute_max-rows_api_hour_max","text":"The maximum number of listing rows API calls within 1 minute / hour. Listing rows in a large base involving converting internal representation to end-user friendly representation, which will cost a few seconds for 10K+ rows. So the API should be limited more than other APIs.","title":"rows_api_minute_max / rows_api_hour_max"},{"location":"config/dtable_server_config/#worker_threads_num","text":"Number of worker threads serving list rows API","title":"worker_threads_num"},{"location":"config/dtable_server_config/#notice","text":"You should restart the SeaTable after the modification of these settings by run the code below: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"Notice"},{"location":"config/dtable_web_settings/","text":"dtable web settings \u00b6 Note: You can also modify most of the config items via web interface. The config items are saved in database table (dtable_db/constance_config). They have a higher priority over the items in config files. If you want to disable settings via web interface, you can add ENABLE_SETTINGS_VIA_WEB = False to dtable_web_settings.py . Basic settings \u00b6 # for dtable-server ## The private key is used to authenticate between DTable Web and DTable Server ## DTABLE_SERVER_URL is for telling DTable Web the DTable Server's URL ## DTABLE_SOCKET_URL is for telling DTable Web the web socket URL of DTable Server DTABLE_PRIVATE_KEY = 'xxxxx' DTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/' DTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/' # The URL of dtable-web that for users to visit your SeaTable server DTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/' # The help link URL HELP_LINK = 'https://seatable.io/help/' # The file server URL FILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/' If you changed your domain, the URLs in above settings must be changed accordingly. Sending Email Notifications \u00b6 Refer to email sending documentation . User management options \u00b6 The following options affect user registration, password and session. # Enalbe or disalbe registration on web. Default is `False`. ENABLE_SIGNUP = False # Activate or deactivate user when registration complete. Default is `True`. # If set to `False`, new users need to be activated by admin in admin panel. ACTIVATE_AFTER_REGISTRATION = False # Whether allow user to delete its account ENABLE_DELETE_ACCOUNT = True # Whether to send email when a system admin adding a new member. Default is `True`. SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True # Whether to send email when a system admin resetting a user's password. Default is `True`. SEND_EMAIL_ON_RESETTING_USER_PASSWD = True # Send system admin notify email when user registration is complete. Default is `False`. NOTIFY_ADMIN_AFTER_REGISTRATION = True # Remember days for login. Default is 7 LOGIN_REMEMBER_DAYS = 7 # Attempt limit before showing a captcha when login. LOGIN_ATTEMPT_LIMIT = 3 # deactivate user account when login attempts exceed limit FREEZE_USER_ON_LOGIN_FAILED = False # mininum length for user's password USER_PASSWORD_MIN_LENGTH = 6 # LEVEL based on four types of input: # num, upper letter, lower letter, other symbols # '3' means password must have at least 3 types of the above. USER_PASSWORD_STRENGTH_LEVEL = 3 # default False, only check USER_PASSWORD_MIN_LENGTH # when True, check password strength level, STRONG(or above) is allowed USER_STRONG_PASSWORD_REQUIRED = False # Force user to change password when admin add/reset a user. FORCE_PASSWORD_CHANGE = True # Age of cookie, in seconds (default: 2 weeks). SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # Whether a user's session cookie expires when the Web browser is closed. SESSION_EXPIRE_AT_BROWSER_CLOSE = False # Whether to save the session data on every request. Default is `False` SESSION_SAVE_EVERY_REQUEST = False Other options \u00b6 # Disable settings via Web interface in system admin->settings # Default is True ENABLE_SETTINGS_VIA_WEB = False # Choices can be found here: # http://en.wikipedia.org/wiki/List_of_tz_zones_by_name # although not all choices may be available on all operating systems. # If running in a Windows environment this must be set to the same as your # system time zone. TIME_ZONE = 'UTC' # Language code for this installation. All choices can be found here: # http://www.i18nguy.com/unicode/language-identifiers.html # Default language for sending emails. LANGUAGE_CODE = 'en' # Custom language code choice. LANGUAGES = ( ( 'en' , 'English' ), ( 'zh-cn' , '\u7b80\u4f53\u4e2d\u6587' ), ( 'zh-tw' , '\u7e41\u9ad4\u4e2d\u6587' ), ) # Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time. SITE_NAME = 'SeaTable' # Browser tab's title SITE_TITLE = 'Private SeaTable' # Configure user help pages HELP_LINK = 'https://seatable.io/help/' # Add privacy policy link and terms link PRIVACY_POLICY_LINK = '' TERMS_OF_SERVICE_LINK = '' RESTful API \u00b6 # API throttling related settings. Enlarger the rates if you got 429 response code during API calls. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_RATES': { 'ping': '600/minute', 'anon': '5/minute', 'user': '300/minute', }, 'UNICODE_JSON': False, } # Throtting whitelist used to disable throttle for certain IPs. # e.g. REST_FRAMEWORK_THROTTING_WHITELIST = ['127.0.0.1', '192.168.1.1'] # Please make sure `REMOTE_ADDR` header is configured in Nginx conf REST_FRAMEWORK_THROTTING_WHITELIST = [] Note \u00b6 You need to restart SeaTable so that your changes take effect. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"dtable_web_settings.py"},{"location":"config/dtable_web_settings/#dtable-web-settings","text":"Note: You can also modify most of the config items via web interface. The config items are saved in database table (dtable_db/constance_config). They have a higher priority over the items in config files. If you want to disable settings via web interface, you can add ENABLE_SETTINGS_VIA_WEB = False to dtable_web_settings.py .","title":"dtable web settings"},{"location":"config/dtable_web_settings/#basic-settings","text":"# for dtable-server ## The private key is used to authenticate between DTable Web and DTable Server ## DTABLE_SERVER_URL is for telling DTable Web the DTable Server's URL ## DTABLE_SOCKET_URL is for telling DTable Web the web socket URL of DTable Server DTABLE_PRIVATE_KEY = 'xxxxx' DTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/' DTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/' # The URL of dtable-web that for users to visit your SeaTable server DTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/' # The help link URL HELP_LINK = 'https://seatable.io/help/' # The file server URL FILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/' If you changed your domain, the URLs in above settings must be changed accordingly.","title":"Basic settings"},{"location":"config/dtable_web_settings/#sending-email-notifications","text":"Refer to email sending documentation .","title":"Sending Email Notifications"},{"location":"config/dtable_web_settings/#user-management-options","text":"The following options affect user registration, password and session. # Enalbe or disalbe registration on web. Default is `False`. ENABLE_SIGNUP = False # Activate or deactivate user when registration complete. Default is `True`. # If set to `False`, new users need to be activated by admin in admin panel. ACTIVATE_AFTER_REGISTRATION = False # Whether allow user to delete its account ENABLE_DELETE_ACCOUNT = True # Whether to send email when a system admin adding a new member. Default is `True`. SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True # Whether to send email when a system admin resetting a user's password. Default is `True`. SEND_EMAIL_ON_RESETTING_USER_PASSWD = True # Send system admin notify email when user registration is complete. Default is `False`. NOTIFY_ADMIN_AFTER_REGISTRATION = True # Remember days for login. Default is 7 LOGIN_REMEMBER_DAYS = 7 # Attempt limit before showing a captcha when login. LOGIN_ATTEMPT_LIMIT = 3 # deactivate user account when login attempts exceed limit FREEZE_USER_ON_LOGIN_FAILED = False # mininum length for user's password USER_PASSWORD_MIN_LENGTH = 6 # LEVEL based on four types of input: # num, upper letter, lower letter, other symbols # '3' means password must have at least 3 types of the above. USER_PASSWORD_STRENGTH_LEVEL = 3 # default False, only check USER_PASSWORD_MIN_LENGTH # when True, check password strength level, STRONG(or above) is allowed USER_STRONG_PASSWORD_REQUIRED = False # Force user to change password when admin add/reset a user. FORCE_PASSWORD_CHANGE = True # Age of cookie, in seconds (default: 2 weeks). SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # Whether a user's session cookie expires when the Web browser is closed. SESSION_EXPIRE_AT_BROWSER_CLOSE = False # Whether to save the session data on every request. Default is `False` SESSION_SAVE_EVERY_REQUEST = False","title":"User management options"},{"location":"config/dtable_web_settings/#other-options","text":"# Disable settings via Web interface in system admin->settings # Default is True ENABLE_SETTINGS_VIA_WEB = False # Choices can be found here: # http://en.wikipedia.org/wiki/List_of_tz_zones_by_name # although not all choices may be available on all operating systems. # If running in a Windows environment this must be set to the same as your # system time zone. TIME_ZONE = 'UTC' # Language code for this installation. All choices can be found here: # http://www.i18nguy.com/unicode/language-identifiers.html # Default language for sending emails. LANGUAGE_CODE = 'en' # Custom language code choice. LANGUAGES = ( ( 'en' , 'English' ), ( 'zh-cn' , '\u7b80\u4f53\u4e2d\u6587' ), ( 'zh-tw' , '\u7e41\u9ad4\u4e2d\u6587' ), ) # Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time. SITE_NAME = 'SeaTable' # Browser tab's title SITE_TITLE = 'Private SeaTable' # Configure user help pages HELP_LINK = 'https://seatable.io/help/' # Add privacy policy link and terms link PRIVACY_POLICY_LINK = '' TERMS_OF_SERVICE_LINK = ''","title":"Other options"},{"location":"config/dtable_web_settings/#restful-api","text":"# API throttling related settings. Enlarger the rates if you got 429 response code during API calls. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_RATES': { 'ping': '600/minute', 'anon': '5/minute', 'user': '300/minute', }, 'UNICODE_JSON': False, } # Throtting whitelist used to disable throttle for certain IPs. # e.g. REST_FRAMEWORK_THROTTING_WHITELIST = ['127.0.0.1', '192.168.1.1'] # Please make sure `REMOTE_ADDR` header is configured in Nginx conf REST_FRAMEWORK_THROTTING_WHITELIST = []","title":"RESTful API"},{"location":"config/dtable_web_settings/#note","text":"You need to restart SeaTable so that your changes take effect. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"Note"},{"location":"config/integrate-with-seafile/","text":"Integrate with Seafile \u00b6 By the integration of SeaTable and Seafile, users can either choose the files from Seafile in the file column, or you can transfer files from SeaTable to Seafile. To make this integration possible, you need to grant the Cross-Domain permissions by setting an \"Access-Control-Allow-Origin\" header. Here is an example based on OS Ubuntu18.04 by adding several lines of configuration at /etc/nginx/sites-available/seafile.conf as bellow: location / { add_header Access-Control-Allow-Origin *; if ($request_method = 'OPTIONS') { add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS; add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\"; return 204; } \ufeff proxy_pass http://127.0.0.1:8000; ...............","title":"Integrate with Seafile"},{"location":"config/integrate-with-seafile/#integrate-with-seafile","text":"By the integration of SeaTable and Seafile, users can either choose the files from Seafile in the file column, or you can transfer files from SeaTable to Seafile. To make this integration possible, you need to grant the Cross-Domain permissions by setting an \"Access-Control-Allow-Origin\" header. Here is an example based on OS Ubuntu18.04 by adding several lines of configuration at /etc/nginx/sites-available/seafile.conf as bellow: location / { add_header Access-Control-Allow-Origin *; if ($request_method = 'OPTIONS') { add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS; add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\"; return 204; } \ufeff proxy_pass http://127.0.0.1:8000; ...............","title":"Integrate with Seafile"},{"location":"config/seafile-conf/","text":"seafile.conf settings \u00b6 Seafile fileserver configuration \u00b6 The configuration of seafile fileserver is in the [fileserver] section of the file seafile.conf [fileserver] # tcp port for fileserver port = 8082 # bind address for fileserver # default to 0.0.0.0, if deployed without proxy: no access restriction # set to 127.0.0.1, if used with local proxy: only access by local host = 127.0.0.1 # set the number of worker threads to server http requests. # Default value is 10, which is a good value for most use cases. worker_threads = 15 Database configuration \u00b6 The whole database configuration is stored in the [database] section of the configuration file. [database] type = mysql host = db port = 3306 user = root password = seatable_db db_name = seafile_db connection_charset = utf8 max_connections=100 When you configure seafile server to use MariaDB, the default connection pool size is 100, which should be enough for most use cases.","title":"seafile.conf"},{"location":"config/seafile-conf/#seafileconf-settings","text":"","title":"seafile.conf settings"},{"location":"config/seafile-conf/#seafile-fileserver-configuration","text":"The configuration of seafile fileserver is in the [fileserver] section of the file seafile.conf [fileserver] # tcp port for fileserver port = 8082 # bind address for fileserver # default to 0.0.0.0, if deployed without proxy: no access restriction # set to 127.0.0.1, if used with local proxy: only access by local host = 127.0.0.1 # set the number of worker threads to server http requests. # Default value is 10, which is a good value for most use cases. worker_threads = 15","title":"Seafile fileserver configuration"},{"location":"config/seafile-conf/#database-configuration","text":"The whole database configuration is stored in the [database] section of the configuration file. [database] type = mysql host = db port = 3306 user = root password = seatable_db db_name = seafile_db connection_charset = utf8 max_connections=100 When you configure seafile server to use MariaDB, the default connection pool size is 100, which should be enough for most use cases.","title":"Database configuration"},{"location":"config/seahub_customization/","text":"Seahub customization \u00b6 Customize Seahub Logo and CSS \u00b6 Create a folder <seafile-install-path>/seahub-data/custom . Create a symbolic link in seafile-server-latest/seahub/media by ln -s ../../../seahub-data/custom custom . During upgrading, Seafile upgrade script will create symbolic link automatically to preserve your customization. Customize Logo \u00b6 Add your logo file to custom/ Overwrite LOGO_PATH in seahub_settings.py LOGO_PATH = 'custom/mylogo.png' Default width and height for logo is 149px and 32px, you may need to change that according to yours. LOGO_WIDTH = 149 LOGO_HEIGHT = 32 Customize Favicon \u00b6 Add your favicon file to custom/ Overwrite FAVICON_PATH in seahub_settings.py FAVICON_PATH = 'custom/favicon.png' Customize Seahub CSS \u00b6 Add your css file to custom/ , for example, custom.css Overwrite BRANDING_CSS in seahub_settings.py BRANDING_CSS = 'custom/custom.css' You can find a good example of customized css file here: https://github.com/focmb/seafile_custom_css_green Customize help page \u00b6 Note: Since version 2.1. First go to the custom folder cd <seafile-install-path>/seahub-data/custom then run the following commands mkdir templates mkdir templates/help cp ../../seafile-server-latest/seahub/seahub/help/templates/help/install.html templates/help/ Modify the templates/help/install.html file and save it. You will see the new help page. Add custom navigation \u00b6 Since Pro 7.0.9, Seafile supports adding some custom navigation entries to the home page for quick access. This requires you to add the following configuration information to the conf/seahub_settings.py configuration file: CUSTOM_NAV_ITEMS = [ {'icon': 'sf2-icon-star', 'desc': 'Custom navigation 1', 'link': 'https://www.seafile.com' }, {'icon': 'sf2-icon-wiki-view', 'desc': 'Custom navigation 2', 'link': 'https://download.seafile.com/published/seafile-manual/home.md' }, {'icon': 'sf2-icon-wrench', 'desc': 'Custom navigation 3', 'link': 'http://www.example.com' }, ] Note: The icon field currently only supports icons in Seafile that begin with sf2-icon . Then restart the seahub service to take effect. Once you log in to the Seafile system homepage again, you will see the new navigation entry under the Tools navigation bar on the left.","title":"Seahub customization"},{"location":"config/seahub_customization/#seahub-customization","text":"","title":"Seahub customization"},{"location":"config/seahub_customization/#customize-seahub-logo-and-css","text":"Create a folder <seafile-install-path>/seahub-data/custom . Create a symbolic link in seafile-server-latest/seahub/media by ln -s ../../../seahub-data/custom custom . During upgrading, Seafile upgrade script will create symbolic link automatically to preserve your customization.","title":"Customize Seahub Logo and CSS"},{"location":"config/seahub_customization/#customize-logo","text":"Add your logo file to custom/ Overwrite LOGO_PATH in seahub_settings.py LOGO_PATH = 'custom/mylogo.png' Default width and height for logo is 149px and 32px, you may need to change that according to yours. LOGO_WIDTH = 149 LOGO_HEIGHT = 32","title":"Customize Logo"},{"location":"config/seahub_customization/#customize-favicon","text":"Add your favicon file to custom/ Overwrite FAVICON_PATH in seahub_settings.py FAVICON_PATH = 'custom/favicon.png'","title":"Customize Favicon"},{"location":"config/seahub_customization/#customize-seahub-css","text":"Add your css file to custom/ , for example, custom.css Overwrite BRANDING_CSS in seahub_settings.py BRANDING_CSS = 'custom/custom.css' You can find a good example of customized css file here: https://github.com/focmb/seafile_custom_css_green","title":"Customize Seahub CSS"},{"location":"config/seahub_customization/#customize-help-page","text":"Note: Since version 2.1. First go to the custom folder cd <seafile-install-path>/seahub-data/custom then run the following commands mkdir templates mkdir templates/help cp ../../seafile-server-latest/seahub/seahub/help/templates/help/install.html templates/help/ Modify the templates/help/install.html file and save it. You will see the new help page.","title":"Customize help page"},{"location":"config/seahub_customization/#add-custom-navigation","text":"Since Pro 7.0.9, Seafile supports adding some custom navigation entries to the home page for quick access. This requires you to add the following configuration information to the conf/seahub_settings.py configuration file: CUSTOM_NAV_ITEMS = [ {'icon': 'sf2-icon-star', 'desc': 'Custom navigation 1', 'link': 'https://www.seafile.com' }, {'icon': 'sf2-icon-wiki-view', 'desc': 'Custom navigation 2', 'link': 'https://download.seafile.com/published/seafile-manual/home.md' }, {'icon': 'sf2-icon-wrench', 'desc': 'Custom navigation 3', 'link': 'http://www.example.com' }, ] Note: The icon field currently only supports icons in Seafile that begin with sf2-icon . Then restart the seahub service to take effect. Once you log in to the Seafile system homepage again, you will see the new navigation entry under the Tools navigation bar on the left.","title":"Add custom navigation"},{"location":"config/seatable-controller-conf/","text":"seatable-controller.conf \u00b6 seatable-controller lauches and monitors different components of SeaTable server. seatable-controller.conf is not created by default. If you need to modifiy default behaviour of seatable-controller, you can add the config file manually with contents like below: DTABLE_SERVER_MEMORY_SIZE=8192 DTABLE_SERVER_PING_TIMEOUT=20 DTABLE_SERVER_MEMORY_SIZE: the memory size of dtable-server node DTABLE_SERVER_PING_TIMEOUT: maximum seconds after which the system will reboot if there is no response from dtable-server, you can set a relative higher number if you handle a big table.","title":"seatable-controller.conf"},{"location":"config/seatable-controller-conf/#seatable-controllerconf","text":"seatable-controller lauches and monitors different components of SeaTable server. seatable-controller.conf is not created by default. If you need to modifiy default behaviour of seatable-controller, you can add the config file manually with contents like below: DTABLE_SERVER_MEMORY_SIZE=8192 DTABLE_SERVER_PING_TIMEOUT=20 DTABLE_SERVER_MEMORY_SIZE: the memory size of dtable-server node DTABLE_SERVER_PING_TIMEOUT: maximum seconds after which the system will reboot if there is no response from dtable-server, you can set a relative higher number if you handle a big table.","title":"seatable-controller.conf"},{"location":"config/sending_email/","text":"Sending Email Notifications on SeaTable \u00b6 Types of Email Sending in SeaTable \u00b6 There are currently five types of emails sent in SeaTable : User reset his/her password System admin add new member System admin reset user password User send tables share link Options of Email Sending \u00b6 Please add the following lines to dtable_web_settings.py to enable email sending. EMAIL_USE_TLS = False EMAIL_HOST = 'smtp.example.com' # smpt server EMAIL_HOST_USER = 'username@example.com' # username and domain EMAIL_HOST_PASSWORD = 'password' # password EMAIL_PORT = 25 DEFAULT_FROM_EMAIL = EMAIL_HOST_USER SERVER_EMAIL = EMAIL_HOST_USER If you are using Gmail as email server, use following lines: EMAIL_USE_TLS = True EMAIL_HOST = 'smtp.gmail.com' EMAIL_HOST_USER = 'username@gmail.com' EMAIL_HOST_PASSWORD = 'password' EMAIL_PORT = 587 DEFAULT_FROM_EMAIL = EMAIL_HOST_USER SERVER_EMAIL = EMAIL_HOST_USER Note : If your email service still does not work, you can checkout the log file logs/dtable_web.log to see what may cause the problem. Note2 : If you want to use the email service without authentication leaf EMAIL_HOST_USER and EMAIL_HOST_PASSWORD blank ( '' ). (But notice that the emails then will be sent without a From: address.) Note3 : About using SSL connection (using port 465) Port 587 is being used to establish a TLS connection and port 465 is being used to establish an SSL connection. Starting from Django 1.8, it supports both.","title":"Email sending"},{"location":"config/sending_email/#sending-email-notifications-on-seatable","text":"","title":"Sending Email Notifications on SeaTable"},{"location":"config/sending_email/#types-of-email-sending-in-seatable","text":"There are currently five types of emails sent in SeaTable : User reset his/her password System admin add new member System admin reset user password User send tables share link","title":"Types of Email Sending in SeaTable"},{"location":"config/sending_email/#options-of-email-sending","text":"Please add the following lines to dtable_web_settings.py to enable email sending. EMAIL_USE_TLS = False EMAIL_HOST = 'smtp.example.com' # smpt server EMAIL_HOST_USER = 'username@example.com' # username and domain EMAIL_HOST_PASSWORD = 'password' # password EMAIL_PORT = 25 DEFAULT_FROM_EMAIL = EMAIL_HOST_USER SERVER_EMAIL = EMAIL_HOST_USER If you are using Gmail as email server, use following lines: EMAIL_USE_TLS = True EMAIL_HOST = 'smtp.gmail.com' EMAIL_HOST_USER = 'username@gmail.com' EMAIL_HOST_PASSWORD = 'password' EMAIL_PORT = 587 DEFAULT_FROM_EMAIL = EMAIL_HOST_USER SERVER_EMAIL = EMAIL_HOST_USER Note : If your email service still does not work, you can checkout the log file logs/dtable_web.log to see what may cause the problem. Note2 : If you want to use the email service without authentication leaf EMAIL_HOST_USER and EMAIL_HOST_PASSWORD blank ( '' ). (But notice that the emails then will be sent without a From: address.) Note3 : About using SSL connection (using port 465) Port 587 is being used to establish a TLS connection and port 465 is being used to establish an SSL connection. Starting from Django 1.8, it supports both.","title":"Options of Email Sending"},{"location":"config/templates_and_manual/","text":"Configuration of Manual, Templates, and Plugins \u00b6 Configuration of the Manual \u00b6 HELP_LINK = 'https://seatable.io/help/?lang=auto' Configuration of Templates \u00b6 Using templates requires a version above 1.6.0 of SeaTable. Here are several steps: Enable creating base from templates in config file. Prepare a base for storing the table of template list in your own SeaTable account. In this base, create a table named \"templates\". Prepare several template bases and generate an external-link, which should be filled in the designated cell of column named \"link\" of the table prepared in the second step. We suggest that the base of template list and templates be put together in one group. An example of the \"templates\" table is shown as below: name : internal name for distinguishing between different templates. display_name : template name shown on the website. description : introduction and suggestions of the template. card_image : image shown on the template panel on the website. card_image_expand : image shown on the template detail dialog after clicking the template panel. link : the sharing link of the specific template. dtable web config \u00b6 Add the following lines to dtable_web_settings.py : TEMPLATE_BASE_API_TOKEN = '9851cecfd013a833eec47b629c72b3b593f91c7d' TEMPLATE_TABLE_NAME = 'templates' ENABLE_CREATE_BASE_FROM_TEMPLATE = True SHOW_TEMPLATES_LINK = True Note that the \"TEMPLATE_BASE_API_TOKEN\" can be generated from \"Advanced --> API Token\" option from the dropdown-menu of the template base. Making templates \u00b6 You can either choose downloading our public templates formatted as \u201c.dtable\u201c and import it to your own SeaTable server, or make a template according to your own interests by yourself. Configuration of Plugins \u00b6 With the exception of the calendar plugin (which is bundled with SeaTable Server), SeaTable plugins must be separately installed. In System Admin->Plugins->Import plugins from market, you can import plugins from market directly. You can also download plugins can be downloaded from https://market.seatable.io/plugins/ as ZIP files. Once uploaded to the SeaTable Server via system administration in the web interface, users can add them to their bases via the plugin manager. Map plugin \u00b6 The map plugin currently supports only the Google Maps Platform. For the map plugin to access Google Maps data, a Google API Key is required. Add the following line to dtable_web_settings.py : DTABLE_GOOGLE_MAP_KEY = \u2018xxxx\u2019","title":"Templates and manual"},{"location":"config/templates_and_manual/#configuration-of-manual-templates-and-plugins","text":"","title":"Configuration of Manual, Templates, and Plugins"},{"location":"config/templates_and_manual/#configuration-of-the-manual","text":"HELP_LINK = 'https://seatable.io/help/?lang=auto'","title":"Configuration of the Manual"},{"location":"config/templates_and_manual/#configuration-of-templates","text":"Using templates requires a version above 1.6.0 of SeaTable. Here are several steps: Enable creating base from templates in config file. Prepare a base for storing the table of template list in your own SeaTable account. In this base, create a table named \"templates\". Prepare several template bases and generate an external-link, which should be filled in the designated cell of column named \"link\" of the table prepared in the second step. We suggest that the base of template list and templates be put together in one group. An example of the \"templates\" table is shown as below: name : internal name for distinguishing between different templates. display_name : template name shown on the website. description : introduction and suggestions of the template. card_image : image shown on the template panel on the website. card_image_expand : image shown on the template detail dialog after clicking the template panel. link : the sharing link of the specific template.","title":"Configuration of Templates"},{"location":"config/templates_and_manual/#dtable-web-config","text":"Add the following lines to dtable_web_settings.py : TEMPLATE_BASE_API_TOKEN = '9851cecfd013a833eec47b629c72b3b593f91c7d' TEMPLATE_TABLE_NAME = 'templates' ENABLE_CREATE_BASE_FROM_TEMPLATE = True SHOW_TEMPLATES_LINK = True Note that the \"TEMPLATE_BASE_API_TOKEN\" can be generated from \"Advanced --> API Token\" option from the dropdown-menu of the template base.","title":"dtable web config"},{"location":"config/templates_and_manual/#making-templates","text":"You can either choose downloading our public templates formatted as \u201c.dtable\u201c and import it to your own SeaTable server, or make a template according to your own interests by yourself.","title":"Making templates"},{"location":"config/templates_and_manual/#configuration-of-plugins","text":"With the exception of the calendar plugin (which is bundled with SeaTable Server), SeaTable plugins must be separately installed. In System Admin->Plugins->Import plugins from market, you can import plugins from market directly. You can also download plugins can be downloaded from https://market.seatable.io/plugins/ as ZIP files. Once uploaded to the SeaTable Server via system administration in the web interface, users can add them to their bases via the plugin manager.","title":"Configuration of Plugins"},{"location":"config/templates_and_manual/#map-plugin","text":"The map plugin currently supports only the Google Maps Platform. For the map plugin to access Google Maps data, a Google API Key is required. Add the following line to dtable_web_settings.py : DTABLE_GOOGLE_MAP_KEY = \u2018xxxx\u2019","title":"Map plugin"},{"location":"config/enterprise/S3/","text":"S3 Object Storage \u00b6 Preparations \u00b6 To install Seatable server and use S3 object storage, you need to do: According to the SeaTable deployment document to install and deploy SeaTable server. Install python library boto . It can be used to access S3 service. sudo easy_install boto Install and use Memcached. To improve performance, Seatable will cache some small objects in memcached. We recommend to allocate 128MB of memory to memcached. Modify memcached config file (Ubuntu: /etc/memcached.conf): # Start with a cap of 64 megs of memory. It's reasonable, and the daemon default # Note that the daemon will grow to this size, but does not start out holding this much # memory # -m 64 -m 128 Modify seafile.conf \u00b6 modify /opt/seatable/seatable-data/seatable/conf/seafile.conf [commit_object_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-commit-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [fs_object_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-fs-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [block_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-block-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 It is recommended that you create buckets for commit, fs and block objects respectively. key_id and key are used to provide S3 authentication. You can find the key_id and key in the \"Security Credentials\" section of your AWS account page. When you create buckets on S3, please read the S3 rules for naming first. Note, especially do not use capital letters in the name of the bucket (do not use camel-style naming, such as MyCommitOjbects). For best performance, it is strongly recommended that you install memcached and enable memcache for objects. Use the new S3 service area \u00b6 Since January 2014, the new AWS service area only provides version 4 certification and signing protocol support for S3. This includes such as China region, EU central regions. To use S3 in the new service area, add the following additional options in the three buckets \"commit_object_backend\", \"fs_object_backend\", \"block_backend\": use_v4_signature = true # eu-central-1 for Frankfurt region aws_region = eu-central-1 If you are using S3 in China or Germany, you also need to add the host configuration of the corresponding region under each bucket configuration section, for example, Beijing, China: host = s3.cn-north-1.amazonaws.com.cn In order for search and other services to work in the new AWS service area, you also need to add the following content to the ~/.boto file: [s3] use-sigv4 = True Use HTTPS to connect to S3 \u00b6 You can use HTTPS to connect to S3. Add the following options to seafile.conf: [commit_object_backend] name = s3 ...... use_https = true \ufeff [fs_object_backend] name = s3 ...... use_https = true \ufeff [block_backend] name = s3 ...... use_https = true Use object storage products compatible with S3 \u00b6 There are already many object storage products compatible with S3 protocols, such as OpenStack Swift and Ceph's RGW. You can use object storage compatible with S3 through the following configuration: [commit_object_backend] name = s3 bucket = my-commit-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [fs_object_backend] name = s3 bucket = my-fs-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [block_backend] name = s3 bucket = my-block-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 host is the address and port of the S3 compatible service. You can not add \"http\" or \"https\" before the option. By default, it will use http connection. If you want to use https connection, set the option: hostuse_https = true path_style_request option tells Seatable to use the form https://192.168.1.123:8080/bucketname/object to access the object. In AWS S3 service, the default URL format is virtual host format, such as https://bucketname.s3.amazonaws.com/object . But general object storage products do not support this format.","title":"S3"},{"location":"config/enterprise/S3/#s3-object-storage","text":"","title":"S3 Object Storage"},{"location":"config/enterprise/S3/#preparations","text":"To install Seatable server and use S3 object storage, you need to do: According to the SeaTable deployment document to install and deploy SeaTable server. Install python library boto . It can be used to access S3 service. sudo easy_install boto Install and use Memcached. To improve performance, Seatable will cache some small objects in memcached. We recommend to allocate 128MB of memory to memcached. Modify memcached config file (Ubuntu: /etc/memcached.conf): # Start with a cap of 64 megs of memory. It's reasonable, and the daemon default # Note that the daemon will grow to this size, but does not start out holding this much # memory # -m 64 -m 128","title":"Preparations"},{"location":"config/enterprise/S3/#modify-seafileconf","text":"modify /opt/seatable/seatable-data/seatable/conf/seafile.conf [commit_object_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-commit-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [fs_object_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-fs-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [block_backend] name = s3 # bucket's name can only use lowercase letters, numbers, and dashes bucket = my-block-objects key_id = your-key-id key = your-secret-key memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 It is recommended that you create buckets for commit, fs and block objects respectively. key_id and key are used to provide S3 authentication. You can find the key_id and key in the \"Security Credentials\" section of your AWS account page. When you create buckets on S3, please read the S3 rules for naming first. Note, especially do not use capital letters in the name of the bucket (do not use camel-style naming, such as MyCommitOjbects). For best performance, it is strongly recommended that you install memcached and enable memcache for objects.","title":"Modify seafile.conf"},{"location":"config/enterprise/S3/#use-the-new-s3-service-area","text":"Since January 2014, the new AWS service area only provides version 4 certification and signing protocol support for S3. This includes such as China region, EU central regions. To use S3 in the new service area, add the following additional options in the three buckets \"commit_object_backend\", \"fs_object_backend\", \"block_backend\": use_v4_signature = true # eu-central-1 for Frankfurt region aws_region = eu-central-1 If you are using S3 in China or Germany, you also need to add the host configuration of the corresponding region under each bucket configuration section, for example, Beijing, China: host = s3.cn-north-1.amazonaws.com.cn In order for search and other services to work in the new AWS service area, you also need to add the following content to the ~/.boto file: [s3] use-sigv4 = True","title":"Use the new S3 service area"},{"location":"config/enterprise/S3/#use-https-to-connect-to-s3","text":"You can use HTTPS to connect to S3. Add the following options to seafile.conf: [commit_object_backend] name = s3 ...... use_https = true \ufeff [fs_object_backend] name = s3 ...... use_https = true \ufeff [block_backend] name = s3 ...... use_https = true","title":"Use HTTPS  to connect to S3"},{"location":"config/enterprise/S3/#use-object-storage-products-compatible-with-s3","text":"There are already many object storage products compatible with S3 protocols, such as OpenStack Swift and Ceph's RGW. You can use object storage compatible with S3 through the following configuration: [commit_object_backend] name = s3 bucket = my-commit-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [fs_object_backend] name = s3 bucket = my-fs-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 [block_backend] name = s3 bucket = my-block-objects key_id = your-key-id key = your-secret-key host = 192.168.1.123:8080 path_style_request = true memcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100 host is the address and port of the S3 compatible service. You can not add \"http\" or \"https\" before the option. By default, it will use http connection. If you want to use https connection, set the option: hostuse_https = true path_style_request option tells Seatable to use the form https://192.168.1.123:8080/bucketname/object to access the object. In AWS S3 service, the default URL format is virtual host format, such as https://bucketname.s3.amazonaws.com/object . But general object storage products do not support this format.","title":"Use object storage products compatible with S3"},{"location":"config/enterprise/ldap/","text":"LDAP and Active Directory Configuration \u00b6 LDAP (Light-weight Directory Access Protocol) is a user information management server widely deployed by enterprises, Microsoft's Active Directory is fully compatible with LDAP. This document assumes that you have already understood the knowledge and terminology related to LDAP. SeaTable User Introduction \u00b6 Users in SeaTable are divided into two categories: Users who are stored in the local database. It may be a user created by the administrator, or a user registered by self The user created in SeaTable during LDAP login (or other Single Sign On login). SeaTable will automatically look up users from internal databases and LDAP. As long as users exist in any source, they can log in. Basic LDAP/AD integration configuration \u00b6 SeaTable requires each user in the LDAP/AD server to have a unique ID. Generally, ObjectGUID is used in AD, and EntryUUID is used in other LDAP servers Add the following configuration to dtable_web_settings.py. ENABLE_LDAP = True LDAP_PROVIDER = 'ldap' LDAP_SERVER_URL = 'ldap://192.168.0.124' LDAP_BASE_DN = 'ou=test,ou=test,dc=seatable,dc=local' LDAP_ADMIN_DN = 'administrator@seatable.local' LDAP_ADMIN_PASSWORD = 'Hello@123' LDAP_USER_UNIQUE_ID = 'objectGUID' LDAP_LOGIN_ATTR = 'mail' # The following options are optional # The following two properties are used to splice the user's nickname: first_name last_name, these two options are optional, default is '' LDAP_USER_FIRST_NAME_ATTR = 'givenName' LDAP_USER_LAST_NAME_ATTR = 'sn' # For Chinese name\uff0cReverse the order of first_name and last_name, this is an optional option, default is False LDAP_USER_NAME_REVERSE = True # If LDAP_LOGIN_ATTR is not set to 'mail', this option can be used to specify which attribute to import the user's mailbox address from. The attributes in this option will override the user's email address imported through LOGIN_ATTR. This is an optional option, the default is ''. If this option is not set, the LOGIN_ATTR attribute will be used as the contact email LDAP_CONTACT_EMAIL_ATTR = 'mail' # Used to filter the range of users who can log in, such as limited to a certain security group LDAP_FILTER = 'memberOf=CN=group,CN=developers,DC=example,DC=com' The meaning of each configuration option is as follows: LDAP_PROVIDER: SeaTable uses this configuration to distinguish LDAP from other integrated login methods LDAP_SERVER_URL: The address URL of the LDAP server. If your LDAP server listens on a non-standard port, you can also include the port in the URL, such as: ldap://ldap.example.com:389. LDAP_BASE_DN: In the organizational structure of the LDAP server, the unique name (Distingushed Name, DN for short) of the root node used to query users. All users under this node can access SeaTable. LDAP_ADMIN_DN: The DN of the user used to query the information in the LDAP server. This user should have sufficient authority to access all information under BASE. It is generally recommended to use LDAP/AD administrator. LDAP_ADMIN_PASSWORD: The password of the user corresponding to USER_DN. LDAP_USER_UNIQUE_ID\uff1aThe unique ID of the user in LDAP. You should use ObjectGUID for AD. EntryUUID attribute should be used for other LDAP servers LDAP_LOGIN_ATTR: Used as the attribute for users to log in to LDAP in SeaTable. If you log in via email, you can use the 'mail' attribute or the 'userPrincipalName'. If you want to log in with a Windows username, you can use the 'sAMAccountName' attribute. LDAP_USER_FIRST_NAME_ATTR\uff1aUsed to splice the user's nickname LDAP_USER_LAST_NAME_ATTR\uff1aUsed to splice the user's nickname LDAP_USER_NAME_REVERSE\uff1aThe above two properties whether to reverse splicing Note: If the configuration items include Chinese, need to ensure that the configuration file saved in UTF8 encoding. Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_EMAIL: To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure. If you want all users in the system to be able to access SeaTable, you can use'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name). If you only want people in a certain department to be able to access, you can limit the scope to a certain OU (Organization Unit). You can use the dsquery command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is'staffs', you can run dsquery ou -name staff . More information can be found here . AD supports the use of usernames in the format of'user@domain.com' as LDAP_ADMIN_EMAIL . For example, you can use administrator@example.com as LDAP_ADMIN_EMAIL . Sometimes AD cannot correctly recognize this format. At this point, you can use dsquery to find the DN of the user. For example, if the username is'seatableuser', run dsquery user -name seatableuser to find the user. More information can be found here . LDAP SYNC disable deleted users \u00b6 When a user is deleted in LDAP, the user in SeaTable is auto disabled by LDAP SYNC. Add the following configuration to dtable-event.conf and restart SeaTable. [LDAP_SYNC] enabled = true sync_interval = 60 # The unit is seconds","title":"LDAP"},{"location":"config/enterprise/ldap/#ldap-and-active-directory-configuration","text":"LDAP (Light-weight Directory Access Protocol) is a user information management server widely deployed by enterprises, Microsoft's Active Directory is fully compatible with LDAP. This document assumes that you have already understood the knowledge and terminology related to LDAP.","title":"LDAP and Active Directory Configuration"},{"location":"config/enterprise/ldap/#seatable-user-introduction","text":"Users in SeaTable are divided into two categories: Users who are stored in the local database. It may be a user created by the administrator, or a user registered by self The user created in SeaTable during LDAP login (or other Single Sign On login). SeaTable will automatically look up users from internal databases and LDAP. As long as users exist in any source, they can log in.","title":"SeaTable User Introduction"},{"location":"config/enterprise/ldap/#basic-ldapad-integration-configuration","text":"SeaTable requires each user in the LDAP/AD server to have a unique ID. Generally, ObjectGUID is used in AD, and EntryUUID is used in other LDAP servers Add the following configuration to dtable_web_settings.py. ENABLE_LDAP = True LDAP_PROVIDER = 'ldap' LDAP_SERVER_URL = 'ldap://192.168.0.124' LDAP_BASE_DN = 'ou=test,ou=test,dc=seatable,dc=local' LDAP_ADMIN_DN = 'administrator@seatable.local' LDAP_ADMIN_PASSWORD = 'Hello@123' LDAP_USER_UNIQUE_ID = 'objectGUID' LDAP_LOGIN_ATTR = 'mail' # The following options are optional # The following two properties are used to splice the user's nickname: first_name last_name, these two options are optional, default is '' LDAP_USER_FIRST_NAME_ATTR = 'givenName' LDAP_USER_LAST_NAME_ATTR = 'sn' # For Chinese name\uff0cReverse the order of first_name and last_name, this is an optional option, default is False LDAP_USER_NAME_REVERSE = True # If LDAP_LOGIN_ATTR is not set to 'mail', this option can be used to specify which attribute to import the user's mailbox address from. The attributes in this option will override the user's email address imported through LOGIN_ATTR. This is an optional option, the default is ''. If this option is not set, the LOGIN_ATTR attribute will be used as the contact email LDAP_CONTACT_EMAIL_ATTR = 'mail' # Used to filter the range of users who can log in, such as limited to a certain security group LDAP_FILTER = 'memberOf=CN=group,CN=developers,DC=example,DC=com' The meaning of each configuration option is as follows: LDAP_PROVIDER: SeaTable uses this configuration to distinguish LDAP from other integrated login methods LDAP_SERVER_URL: The address URL of the LDAP server. If your LDAP server listens on a non-standard port, you can also include the port in the URL, such as: ldap://ldap.example.com:389. LDAP_BASE_DN: In the organizational structure of the LDAP server, the unique name (Distingushed Name, DN for short) of the root node used to query users. All users under this node can access SeaTable. LDAP_ADMIN_DN: The DN of the user used to query the information in the LDAP server. This user should have sufficient authority to access all information under BASE. It is generally recommended to use LDAP/AD administrator. LDAP_ADMIN_PASSWORD: The password of the user corresponding to USER_DN. LDAP_USER_UNIQUE_ID\uff1aThe unique ID of the user in LDAP. You should use ObjectGUID for AD. EntryUUID attribute should be used for other LDAP servers LDAP_LOGIN_ATTR: Used as the attribute for users to log in to LDAP in SeaTable. If you log in via email, you can use the 'mail' attribute or the 'userPrincipalName'. If you want to log in with a Windows username, you can use the 'sAMAccountName' attribute. LDAP_USER_FIRST_NAME_ATTR\uff1aUsed to splice the user's nickname LDAP_USER_LAST_NAME_ATTR\uff1aUsed to splice the user's nickname LDAP_USER_NAME_REVERSE\uff1aThe above two properties whether to reverse splicing Note: If the configuration items include Chinese, need to ensure that the configuration file saved in UTF8 encoding. Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_EMAIL: To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure. If you want all users in the system to be able to access SeaTable, you can use'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name). If you only want people in a certain department to be able to access, you can limit the scope to a certain OU (Organization Unit). You can use the dsquery command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is'staffs', you can run dsquery ou -name staff . More information can be found here . AD supports the use of usernames in the format of'user@domain.com' as LDAP_ADMIN_EMAIL . For example, you can use administrator@example.com as LDAP_ADMIN_EMAIL . Sometimes AD cannot correctly recognize this format. At this point, you can use dsquery to find the DN of the user. For example, if the username is'seatableuser', run dsquery user -name seatableuser to find the user. More information can be found here .","title":"Basic LDAP/AD integration configuration"},{"location":"config/enterprise/ldap/#ldap-sync-disable-deleted-users","text":"When a user is deleted in LDAP, the user in SeaTable is auto disabled by LDAP SYNC. Add the following configuration to dtable-event.conf and restart SeaTable. [LDAP_SYNC] enabled = true sync_interval = 60 # The unit is seconds","title":"LDAP SYNC disable deleted users"},{"location":"config/enterprise/oauth/","text":"OAuth \u00b6 First, register the Client App on the OAuth authorization server (such as Github ), remember the Client ID and Client Secret, and set the Redirect Uri (Authorization callback URL in Github). Add the following configuration to dtable_web_settings.py: ENABLE_OAUTH = True OAUTH_ENABLE_INSECURE_TRANSPORT = True OAUTH_PROVIDER_DOMAIN = 'github.com' OAUTH_CLIENT_ID = \"wd529b3b2ae8320e06fr\" OAUTH_CLIENT_SECRET = \"8159c3dcc8ef197cc3bbd94ff6cf101c93ba6d8r\" OAUTH_REDIRECT_URL = 'https://test.seatable.cn/oauth/callback/' OAUTH_AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize' OAUTH_TOKEN_URL = 'https://github.com/login/oauth/access_token' OAUTH_USER_INFO_URL = 'https://api.github.com/user' OAUTH_SCOPE = [\"user\",] OAUTH_ATTRIBUTE_MAP = { \"id\": \"uid\", \"name\": \"name\", \"email\": \"contact_email\", } The meaning of configuration option is as follows: ENABLE_OAUTH_INSECURE_TRANSPORT \u00b6 If https is not configured, you can add it in dtable_web_settings.py ENABLE_OAUTH_INSECURE_TRANSPORT = True \u3002 See more in https://requests-oauthlib.readthedocs.io/en/latest/examples/examples.html note: If you use Google OAuth2 login, the OAUTH_SCOPE configuration should be configured as follows: OAUTH_SCOPE = [\"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"] OAUTH_PROVIDER \u00b6 SeaTable uses this configuration to distinguish OAuth from other login methods\uff0csuch as: github.com. OAUTH_REDIRECT_URL \u00b6 The Redirect URL, Authorization callback URL in Github, such as: https\\://test.seatable.cn/oauth/callback/ OAUTH_AUTHORIZATION_URL\u3001OAUTH_TOKEN_URL\u3001OAUTH_USER_INFO_URL\u3001OAUTH_SCOPE \u00b6 Set these values according to the document of OAuth provider, for GitHub, please check https://docs.github.com/en/developers/apps/authorizing-oauth-app OAUTH_ATTRIBUTE_MAP \u00b6 The correspondence between the user fields obtained from the OAuth authorization server and the user fields in SeaTable. uid: the unique identifier for SeaTable identify a user from the OAuth provider. name: the name of a user in SeaTable contact_email: a user's contact email in SeaTable","title":"OAuth"},{"location":"config/enterprise/oauth/#oauth","text":"First, register the Client App on the OAuth authorization server (such as Github ), remember the Client ID and Client Secret, and set the Redirect Uri (Authorization callback URL in Github). Add the following configuration to dtable_web_settings.py: ENABLE_OAUTH = True OAUTH_ENABLE_INSECURE_TRANSPORT = True OAUTH_PROVIDER_DOMAIN = 'github.com' OAUTH_CLIENT_ID = \"wd529b3b2ae8320e06fr\" OAUTH_CLIENT_SECRET = \"8159c3dcc8ef197cc3bbd94ff6cf101c93ba6d8r\" OAUTH_REDIRECT_URL = 'https://test.seatable.cn/oauth/callback/' OAUTH_AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize' OAUTH_TOKEN_URL = 'https://github.com/login/oauth/access_token' OAUTH_USER_INFO_URL = 'https://api.github.com/user' OAUTH_SCOPE = [\"user\",] OAUTH_ATTRIBUTE_MAP = { \"id\": \"uid\", \"name\": \"name\", \"email\": \"contact_email\", } The meaning of configuration option is as follows:","title":"OAuth"},{"location":"config/enterprise/oauth/#enable_oauth_insecure_transport","text":"If https is not configured, you can add it in dtable_web_settings.py ENABLE_OAUTH_INSECURE_TRANSPORT = True \u3002 See more in https://requests-oauthlib.readthedocs.io/en/latest/examples/examples.html note: If you use Google OAuth2 login, the OAUTH_SCOPE configuration should be configured as follows: OAUTH_SCOPE = [\"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"]","title":"ENABLE_OAUTH_INSECURE_TRANSPORT"},{"location":"config/enterprise/oauth/#oauth_provider","text":"SeaTable uses this configuration to distinguish OAuth from other login methods\uff0csuch as: github.com.","title":"OAUTH_PROVIDER"},{"location":"config/enterprise/oauth/#oauth_redirect_url","text":"The Redirect URL, Authorization callback URL in Github, such as: https\\://test.seatable.cn/oauth/callback/","title":"OAUTH_REDIRECT_URL"},{"location":"config/enterprise/oauth/#oauth_authorization_urloauth_token_urloauth_user_info_urloauth_scope","text":"Set these values according to the document of OAuth provider, for GitHub, please check https://docs.github.com/en/developers/apps/authorizing-oauth-app","title":"OAUTH_AUTHORIZATION_URL\u3001OAUTH_TOKEN_URL\u3001OAUTH_USER_INFO_URL\u3001OAUTH_SCOPE"},{"location":"config/enterprise/oauth/#oauth_attribute_map","text":"The correspondence between the user fields obtained from the OAuth authorization server and the user fields in SeaTable. uid: the unique identifier for SeaTable identify a user from the OAuth provider. name: the name of a user in SeaTable contact_email: a user's contact email in SeaTable","title":"OAUTH_ATTRIBUTE_MAP"},{"location":"config/enterprise/roles_permissions/","text":"User Roles \u00b6 In SeaTable Enterprise Edition (SeaTable EE), a user's permissions are determined by the role assigned to the user. SeaTable has two standard roles. Additionally, extra roles can be created for more fine-grained permission management. All changes relating to the SeaTable's roles are done in the configuration file dtable_web_settings.py . NOTE: Admin privileges are not part of the user role. Available Permissions \u00b6 SeaTable version 2.3 supports 17 permissions: Permission Added in version Description Additional information can_add_dtable 1.x Permission to create bases. can_add_group 1.x Permission to create goups. The user creating a group becomes automatically the group's owner. The permission can_add_dtable is necessary to create bases inside a group. can_use_global_address_book 1.x Enables autocomplete of names and emails of other users in the system. If cloud_mode = True in dtable_web_settings.py , autocomplete is disabled for personal accounts and autocomplete is enabled inside teams. can_generate_share_link 1.x Permission to create invite links. can_generate_external_link 1.x Permission to create external links. can_invite_guest 1.x role_asset_quota 1.x Storage quota for files and images inside a user's bases. '1G' means a storage quota of one gigabyte; an empty value '' means no storage quota. Files in shared bases owned by other users do not count against the user's storage quota. row_limit 1.x Row limit for all bases of the user. '10000' (with quotes) means a limit of 10.000 rows; '-1' (with quotes) means no row limit. Rows in shared bases owned by other users do not count against the row limit. Archived rows does not count against the limit either. can_create_common_dataset 1.x Permission to create common datasets (CDS). If set to False, the user cannot CDS, but the user can access existing CDS. can_run_python_script 1.x Permission to run Python scripts. The execution of Python scripts requires the installation of FAAS Sccheduler and Python Runner can_use_advanced_permissions 1.5 Permission to use advanced permissions. Advanced permissions include table permissions, column permissions, view share, custom sharing permissions, row locking, and base security settings. snapshot_days 2.1 Retention period for snapshots in days. 180 (without quotes) means a storage period of 180 days; no value means an unlimited retention period. Snapshots older than the retention period are automatically removed. can_use_external_app 2.2 Permission to use external apps. If set to False, the menu is not shown. can_use_automation_rules 2.2 Permission to create and run automation rules. scripts_running_limit 2.3 Number of Python scripts a user can run within a month. 100 (without quotes) means 100 script runs per month; -1 (without quotes) means unlimited script runs. The script run counter is reset at the beginning of every month. Only visible if can_run_python_script = True and Python Runner is available. can_schedule_run_script 2.3 Permission to schedule the execution of Python scripts. The permission can_run_python_script is also necessary to automatically run Python scripts. can_archive_rows 2.3 Permission to archive rows. If set to False, the user cannot archive rows and cannot create archive views. Standard Roles \u00b6 The two standard roles default and guest are defined as follows: ENABLED_ROLE_PERMISSIONS = { 'default' : { 'can_add_dtable' : True , 'can_add_group' : True , 'can_use_global_address_book' : True , 'can_generate_share_link' : True , 'can_generate_external_link' : True , 'can_invite_guest' : False , 'role_asset_quota' : '' , 'row_limit' : - 1 , 'can_create_common_dataset' : True , 'can_run_python_script' : True , 'can_use_advanced_permissions' : True , 'snapshot_days' : 180 , 'can_use_external_app' : True , 'can_use_automation_rules' : True , 'scripts_running_limit' : - 1 , 'can_schedule_run_script' : True , 'can_archive_rows' : True }, 'guest' : { 'can_add_dtable' : False , 'can_add_group' : False , 'can_use_global_address_book' : False , 'can_generate_share_link' : False , 'can_generate_external_link' : True , 'can_invite_guest' : False , 'role_asset_quota' : '' , 'row_limit' : - 1 , 'can_create_common_dataset' : False , 'can_run_python_script' : True , 'can_use_advanced_permissions' : False , 'snapshot_days' : 30 , 'can_use_external_app' : True , 'can_use_automation_rules' : True , 'scripts_running_limit' : - 1 , 'can_schedule_run_script' : True , 'can_archive_rows' : True }, } If you want to edit the standard roles, copy the above codeblock to dtable_web_settings.py and modify as per your needs. Restart SeaTable for the changes to take effect. Custom Roles \u00b6 You can add extra roles by extending the codeblock in dtable_web_settings.py . To add a role employee , for example, add the following lines (beginning at 'employee' and ending at }, ) to the existing role definition. ENABLED_ROLE_PERMISSIONS = { 'employee': { 'can_add_dtable': True, 'can_add_group': False, 'can_create_common_dataset': False }, } Restart SeaTable for the new role to become available in SeaTable.","title":"Roles and Permissions"},{"location":"config/enterprise/roles_permissions/#user-roles","text":"In SeaTable Enterprise Edition (SeaTable EE), a user's permissions are determined by the role assigned to the user. SeaTable has two standard roles. Additionally, extra roles can be created for more fine-grained permission management. All changes relating to the SeaTable's roles are done in the configuration file dtable_web_settings.py . NOTE: Admin privileges are not part of the user role.","title":"User Roles"},{"location":"config/enterprise/roles_permissions/#available-permissions","text":"SeaTable version 2.3 supports 17 permissions: Permission Added in version Description Additional information can_add_dtable 1.x Permission to create bases. can_add_group 1.x Permission to create goups. The user creating a group becomes automatically the group's owner. The permission can_add_dtable is necessary to create bases inside a group. can_use_global_address_book 1.x Enables autocomplete of names and emails of other users in the system. If cloud_mode = True in dtable_web_settings.py , autocomplete is disabled for personal accounts and autocomplete is enabled inside teams. can_generate_share_link 1.x Permission to create invite links. can_generate_external_link 1.x Permission to create external links. can_invite_guest 1.x role_asset_quota 1.x Storage quota for files and images inside a user's bases. '1G' means a storage quota of one gigabyte; an empty value '' means no storage quota. Files in shared bases owned by other users do not count against the user's storage quota. row_limit 1.x Row limit for all bases of the user. '10000' (with quotes) means a limit of 10.000 rows; '-1' (with quotes) means no row limit. Rows in shared bases owned by other users do not count against the row limit. Archived rows does not count against the limit either. can_create_common_dataset 1.x Permission to create common datasets (CDS). If set to False, the user cannot CDS, but the user can access existing CDS. can_run_python_script 1.x Permission to run Python scripts. The execution of Python scripts requires the installation of FAAS Sccheduler and Python Runner can_use_advanced_permissions 1.5 Permission to use advanced permissions. Advanced permissions include table permissions, column permissions, view share, custom sharing permissions, row locking, and base security settings. snapshot_days 2.1 Retention period for snapshots in days. 180 (without quotes) means a storage period of 180 days; no value means an unlimited retention period. Snapshots older than the retention period are automatically removed. can_use_external_app 2.2 Permission to use external apps. If set to False, the menu is not shown. can_use_automation_rules 2.2 Permission to create and run automation rules. scripts_running_limit 2.3 Number of Python scripts a user can run within a month. 100 (without quotes) means 100 script runs per month; -1 (without quotes) means unlimited script runs. The script run counter is reset at the beginning of every month. Only visible if can_run_python_script = True and Python Runner is available. can_schedule_run_script 2.3 Permission to schedule the execution of Python scripts. The permission can_run_python_script is also necessary to automatically run Python scripts. can_archive_rows 2.3 Permission to archive rows. If set to False, the user cannot archive rows and cannot create archive views.","title":"Available Permissions"},{"location":"config/enterprise/roles_permissions/#standard-roles","text":"The two standard roles default and guest are defined as follows: ENABLED_ROLE_PERMISSIONS = { 'default' : { 'can_add_dtable' : True , 'can_add_group' : True , 'can_use_global_address_book' : True , 'can_generate_share_link' : True , 'can_generate_external_link' : True , 'can_invite_guest' : False , 'role_asset_quota' : '' , 'row_limit' : - 1 , 'can_create_common_dataset' : True , 'can_run_python_script' : True , 'can_use_advanced_permissions' : True , 'snapshot_days' : 180 , 'can_use_external_app' : True , 'can_use_automation_rules' : True , 'scripts_running_limit' : - 1 , 'can_schedule_run_script' : True , 'can_archive_rows' : True }, 'guest' : { 'can_add_dtable' : False , 'can_add_group' : False , 'can_use_global_address_book' : False , 'can_generate_share_link' : False , 'can_generate_external_link' : True , 'can_invite_guest' : False , 'role_asset_quota' : '' , 'row_limit' : - 1 , 'can_create_common_dataset' : False , 'can_run_python_script' : True , 'can_use_advanced_permissions' : False , 'snapshot_days' : 30 , 'can_use_external_app' : True , 'can_use_automation_rules' : True , 'scripts_running_limit' : - 1 , 'can_schedule_run_script' : True , 'can_archive_rows' : True }, } If you want to edit the standard roles, copy the above codeblock to dtable_web_settings.py and modify as per your needs. Restart SeaTable for the changes to take effect.","title":"Standard Roles"},{"location":"config/enterprise/roles_permissions/#custom-roles","text":"You can add extra roles by extending the codeblock in dtable_web_settings.py . To add a role employee , for example, add the following lines (beginning at 'employee' and ending at }, ) to the existing role definition. ENABLED_ROLE_PERMISSIONS = { 'employee': { 'can_add_dtable': True, 'can_add_group': False, 'can_create_common_dataset': False }, } Restart SeaTable for the new role to become available in SeaTable.","title":"Custom Roles"},{"location":"config/enterprise/saml/","text":"SAML SSO \u00b6 In this document, we use Azure SAML to show the steps to connect SeaTable with SAML. Other SAML provider should be similiar. Prepare Certs File \u00b6 Create certs dir docker exec -it seatable bash cd /opt/seatable mkdir certs cd certs You can generate them by: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout sp.key -out sp.crt Configure Azure SAML \u00b6 Add application: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal Assign users: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-assign-users Set up SSO: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-setup-sso Set user attributes: https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-claims-mapping-policy-type Download base64 format signing certificate and metadata XML file, put them under the certs(/opt/seatable/certs) directory. Configure SeaTable \u00b6 Add the following configuration to dtable_web_settings.py ENABLE_SAML = True SAML_METADATA_REMOTE_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx' SAML_PROVIDER_DOMAIN = 'Azure_saml2' SAML_ATTRIBUTE_MAP = { 'uid': 'uid', 'ContactEmail': 'contact_email', 'DisplayName': 'name', } SAML_ENTITY_ID = 'https://test.seatable.cn/saml2/metadata/' # The following configuration is to generate SP metadata from os import path import saml2 import saml2.saml CERTS_DIR = '/opt/seatable/certs/' SP_SERVICE_URL = 'https://test.seatable.cn' XMLSEC_BINARY = '/usr/bin/xmlsec1' SAML_CONFIG = { 'xmlsec_binary': XMLSEC_BINARY, # full path to the xmlsec1 binary programm 'allow_unknown_attributes': True, 'entityid': SP_SERVICE_URL + '/saml2/metadata/', # your entity id # this block states what services we provide 'service': { # we are just a lonely SP 'sp' : { \"allow_unsolicited\": True, 'name': 'Federated Seafile Service', 'name_id_format': saml2.saml.NAMEID_FORMAT_EMAILADDRESS, 'required_attributes': [\"uid\"], # attributes that this project need to identify a user 'optional_attributes': ['eduPersonAffiliation', ], # attributes that may be useful to have but not required 'endpoints': { 'assertion_consumer_service': [ (SP_SERVICE_URL + '/saml/acs/', saml2.BINDING_HTTP_POST), ], }, 'idp': { # SAML_METADATA_REMOTE_URL 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx': { 'single_sign_on_service': { # SingleSignOnService saml2.BINDING_HTTP_REDIRECT: 'https://login.microsoftonline.com/xxx/saml2', }, 'single_logout_service': { # SingleLogoutService saml2.BINDING_HTTP_REDIRECT: 'https://login.microsoftonline.com/xxx/saml2', }, }, }, }, }, 'metadata': { 'local': [path.join(CERTS_DIR, 'idp_federation_metadata.xml')], # where the remote metadata is stored }, 'debug': 1, # set to 1 to output debugging information 'cert_file': path.join(CERTS_DIR, 'idp.crt'), # Signing from IdP 'encryption_keypairs': [{ 'key_file': path.join(CERTS_DIR, 'sp.key'), # private part 'cert_file': path.join(CERTS_DIR, 'sp.crt'), # public part }], 'valid_for': 24, # how long is our metadata valid } Upload the metadata of SeaTable \u00b6 Restart SeaTable, enter the entity id URL of SeaTable in the browser, e.g. https://test.seatable.cn/saml2/metadata/ , download the web page content to the local, name it sp.xml, and upload it to the Azure SAML application. Log in to the SeaTable homepage, click single sign-on, and use the user assigned to Azure SAML to perform a SAML login test.","title":"SAML"},{"location":"config/enterprise/saml/#saml-sso","text":"In this document, we use Azure SAML to show the steps to connect SeaTable with SAML. Other SAML provider should be similiar.","title":"SAML SSO"},{"location":"config/enterprise/saml/#prepare-certs-file","text":"Create certs dir docker exec -it seatable bash cd /opt/seatable mkdir certs cd certs You can generate them by: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout sp.key -out sp.crt","title":"Prepare Certs File"},{"location":"config/enterprise/saml/#configure-azure-saml","text":"Add application: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal Assign users: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-assign-users Set up SSO: https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/add-application-portal-setup-sso Set user attributes: https://docs.microsoft.com/en-us/azure/active-directory/develop/reference-claims-mapping-policy-type Download base64 format signing certificate and metadata XML file, put them under the certs(/opt/seatable/certs) directory.","title":"Configure Azure SAML"},{"location":"config/enterprise/saml/#configure-seatable","text":"Add the following configuration to dtable_web_settings.py ENABLE_SAML = True SAML_METADATA_REMOTE_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx' SAML_PROVIDER_DOMAIN = 'Azure_saml2' SAML_ATTRIBUTE_MAP = { 'uid': 'uid', 'ContactEmail': 'contact_email', 'DisplayName': 'name', } SAML_ENTITY_ID = 'https://test.seatable.cn/saml2/metadata/' # The following configuration is to generate SP metadata from os import path import saml2 import saml2.saml CERTS_DIR = '/opt/seatable/certs/' SP_SERVICE_URL = 'https://test.seatable.cn' XMLSEC_BINARY = '/usr/bin/xmlsec1' SAML_CONFIG = { 'xmlsec_binary': XMLSEC_BINARY, # full path to the xmlsec1 binary programm 'allow_unknown_attributes': True, 'entityid': SP_SERVICE_URL + '/saml2/metadata/', # your entity id # this block states what services we provide 'service': { # we are just a lonely SP 'sp' : { \"allow_unsolicited\": True, 'name': 'Federated Seafile Service', 'name_id_format': saml2.saml.NAMEID_FORMAT_EMAILADDRESS, 'required_attributes': [\"uid\"], # attributes that this project need to identify a user 'optional_attributes': ['eduPersonAffiliation', ], # attributes that may be useful to have but not required 'endpoints': { 'assertion_consumer_service': [ (SP_SERVICE_URL + '/saml/acs/', saml2.BINDING_HTTP_POST), ], }, 'idp': { # SAML_METADATA_REMOTE_URL 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx': { 'single_sign_on_service': { # SingleSignOnService saml2.BINDING_HTTP_REDIRECT: 'https://login.microsoftonline.com/xxx/saml2', }, 'single_logout_service': { # SingleLogoutService saml2.BINDING_HTTP_REDIRECT: 'https://login.microsoftonline.com/xxx/saml2', }, }, }, }, }, 'metadata': { 'local': [path.join(CERTS_DIR, 'idp_federation_metadata.xml')], # where the remote metadata is stored }, 'debug': 1, # set to 1 to output debugging information 'cert_file': path.join(CERTS_DIR, 'idp.crt'), # Signing from IdP 'encryption_keypairs': [{ 'key_file': path.join(CERTS_DIR, 'sp.key'), # private part 'cert_file': path.join(CERTS_DIR, 'sp.crt'), # public part }], 'valid_for': 24, # how long is our metadata valid }","title":"Configure SeaTable"},{"location":"config/enterprise/saml/#upload-the-metadata-of-seatable","text":"Restart SeaTable, enter the entity id URL of SeaTable in the browser, e.g. https://test.seatable.cn/saml2/metadata/ , download the web page content to the local, name it sp.xml, and upload it to the Azure SAML application. Log in to the SeaTable homepage, click single sign-on, and use the user assigned to Azure SAML to perform a SAML login test.","title":"Upload the metadata of SeaTable"},{"location":"docker/Cluster/SeaTable%20Cluster/","text":"SeaTable Cluster \u00b6 SeaTable EE support cluster for better performance. A general architecture is like following: Note All nodes use the same docker image, with a different docker compose file and seatable-controller.conf to control the behaviour. dtable-server does not support multiple instances yet In the following manual, we will show the steps to setup a two nodes deployment A dtable-web node running dtable-web, seaf-server and dtable-events A dtable-server node Setup dtable-web nodes \u00b6 First, setup a one node deployment according to Enterprise-Edition Modify configuration file \u00b6 Modify docker-compose.yml to let Redis can be accessed from another node redis: image: redis:5.0.7 container_name: seatable-redis ports: \"192.xx.xx.xx:6379:6379\" # dtable-web server's IP Modify dtable-web configuration file /Your SeaTable data volume/seatable/conf/dtable_web_settings.py USE_INNER_FILESERVER_FOR_DTABLE_SERVER = False USE_INNER_DTABLE_SERVER = False DTABLE_SERVER_URL = 'https://example.seatable.com/' # dtable-server's url DTABLE_SOCKET_URL = 'https://example.seatable.com/' # dtable-server's url Create configuration file : /Your SeaTable data volume/seatable/conf/seatable-controller.conf ENABLE_CCNET_SERTVER = true ENABLE_SEAFILE_SERTVER = true ENABLE_DTABLE_WEB = true ENABLE_DTABLE_SERVER = false ENABLE_DTABLE_EVENTS = true DTABLE_EVENTS_TASK_MODE = all DTABLE_EVENTS_TASK_MODE can be all, foreground, background. Here we use all. If you want to deploy a separate background node for running dtable-events, use foreground here. Restart dtable-web server \u00b6 docker-compose up -d docker exec -it seatable bash seatable.sh When you see following in the output log, it means success: Skip dtable-server SeaTable started Setup dtable-server \u00b6 Copy and modify docker-compose.yml \u00b6 The default directory for SeaTable is /opt/seatable . Create the directory: mkdir /opt/seatable Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml. vim /opt/seatable/docker-compose.yml version: '2.0' services: seatable: image: docker.seafile.top/seafileltd/seatable-pro-server:1.6.5 container_name: seatable ports: - \"80:80\" - \"443:443\" # If https is enabled, cancel the comment. volumes: - /opt/seatable/shared:/shared # Requested, specifies the path to Seafile data persistent store. environment: - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled - SEATABLE_SERVER_LETSENCRYPT=True - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. networks: - dtable-net networks: dtable-net: Copy and modify configuration file \u00b6 Prepare configuration file directory mkdir -p /opt/seatable/shared/seatable/conf Copy the configuration file on the dtable-web server to the conf directory. Modify the dtable-server configuration file : /Your SeaTable data volume/seatable/conf/dtable_server_config.json { \"host\" : \"mysql host\" , \"user\" : \"mysql uer\" , \"password\" : \"password\" , \"database\" : \"dtable_db\" , \"port\" : 3306 , \"private_key\" : \"xxx\" , \"dtable_web_service_url\" : \"xxx\" , # dtable-web server's URL \"redis_host\" : \"192.xx.xx.xx\" , # dtable-web server's IP \"redis_port\" : 6379 , \"redis_password\" : \"\" } Modify the Nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf upstream dtable_servers { server 127.0.0.1:5000; keepalive 15; } server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; location /socket.io { proxy_pass http://dtable_servers; ... } location / { if ($request_method = 'OPTIONS') { add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS; add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\"; return 204; } proxy_pass http://dtable_servers; ... } } Create configuration file : /Your SeaTable data volume/seatable/seatable-controller.conf ENABLE_CCNET_SERTVER = false ENABLE_SEAFILE_SERTVER = false ENABLE_DTABLE_WEB = false ENABLE_DTABLE_SERVER = true ENABLE_DTABLE_EVENTS = false DTABLE_EVENTS_TASK_MODE = all Start dtable-server \u00b6 docker-compose up -d docker exec -it seatable bash seatable.sh When you see following in the output log, it means success: Skip ccnet-server Skip seafile-server Skip dtable-events Skip dtable-web SeaTable started","title":"Cluster"},{"location":"docker/Cluster/SeaTable%20Cluster/#seatable-cluster","text":"SeaTable EE support cluster for better performance. A general architecture is like following: Note All nodes use the same docker image, with a different docker compose file and seatable-controller.conf to control the behaviour. dtable-server does not support multiple instances yet In the following manual, we will show the steps to setup a two nodes deployment A dtable-web node running dtable-web, seaf-server and dtable-events A dtable-server node","title":"SeaTable Cluster"},{"location":"docker/Cluster/SeaTable%20Cluster/#setup-dtable-web-nodes","text":"First, setup a one node deployment according to Enterprise-Edition","title":"Setup dtable-web nodes"},{"location":"docker/Cluster/SeaTable%20Cluster/#modify-configuration-file","text":"Modify docker-compose.yml to let Redis can be accessed from another node redis: image: redis:5.0.7 container_name: seatable-redis ports: \"192.xx.xx.xx:6379:6379\" # dtable-web server's IP Modify dtable-web configuration file /Your SeaTable data volume/seatable/conf/dtable_web_settings.py USE_INNER_FILESERVER_FOR_DTABLE_SERVER = False USE_INNER_DTABLE_SERVER = False DTABLE_SERVER_URL = 'https://example.seatable.com/' # dtable-server's url DTABLE_SOCKET_URL = 'https://example.seatable.com/' # dtable-server's url Create configuration file : /Your SeaTable data volume/seatable/conf/seatable-controller.conf ENABLE_CCNET_SERTVER = true ENABLE_SEAFILE_SERTVER = true ENABLE_DTABLE_WEB = true ENABLE_DTABLE_SERVER = false ENABLE_DTABLE_EVENTS = true DTABLE_EVENTS_TASK_MODE = all DTABLE_EVENTS_TASK_MODE can be all, foreground, background. Here we use all. If you want to deploy a separate background node for running dtable-events, use foreground here.","title":"Modify configuration file"},{"location":"docker/Cluster/SeaTable%20Cluster/#restart-dtable-web-server","text":"docker-compose up -d docker exec -it seatable bash seatable.sh When you see following in the output log, it means success: Skip dtable-server SeaTable started","title":"Restart dtable-web server"},{"location":"docker/Cluster/SeaTable%20Cluster/#setup-dtable-server","text":"","title":"Setup dtable-server"},{"location":"docker/Cluster/SeaTable%20Cluster/#copy-and-modify-docker-composeyml","text":"The default directory for SeaTable is /opt/seatable . Create the directory: mkdir /opt/seatable Copy the docker-compose.yml file on the dtable-web server and modify docker-compose.yml. vim /opt/seatable/docker-compose.yml version: '2.0' services: seatable: image: docker.seafile.top/seafileltd/seatable-pro-server:1.6.5 container_name: seatable ports: - \"80:80\" - \"443:443\" # If https is enabled, cancel the comment. volumes: - /opt/seatable/shared:/shared # Requested, specifies the path to Seafile data persistent store. environment: - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled - SEATABLE_SERVER_LETSENCRYPT=True - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone. networks: - dtable-net networks: dtable-net:","title":"Copy and modify docker-compose.yml"},{"location":"docker/Cluster/SeaTable%20Cluster/#copy-and-modify-configuration-file","text":"Prepare configuration file directory mkdir -p /opt/seatable/shared/seatable/conf Copy the configuration file on the dtable-web server to the conf directory. Modify the dtable-server configuration file : /Your SeaTable data volume/seatable/conf/dtable_server_config.json { \"host\" : \"mysql host\" , \"user\" : \"mysql uer\" , \"password\" : \"password\" , \"database\" : \"dtable_db\" , \"port\" : 3306 , \"private_key\" : \"xxx\" , \"dtable_web_service_url\" : \"xxx\" , # dtable-web server's URL \"redis_host\" : \"192.xx.xx.xx\" , # dtable-web server's IP \"redis_port\" : 6379 , \"redis_password\" : \"\" } Modify the Nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf upstream dtable_servers { server 127.0.0.1:5000; keepalive 15; } server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; location /socket.io { proxy_pass http://dtable_servers; ... } location / { if ($request_method = 'OPTIONS') { add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS; add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\"; return 204; } proxy_pass http://dtable_servers; ... } } Create configuration file : /Your SeaTable data volume/seatable/seatable-controller.conf ENABLE_CCNET_SERTVER = false ENABLE_SEAFILE_SERTVER = false ENABLE_DTABLE_WEB = false ENABLE_DTABLE_SERVER = true ENABLE_DTABLE_EVENTS = false DTABLE_EVENTS_TASK_MODE = all","title":"Copy and modify configuration file"},{"location":"docker/Cluster/SeaTable%20Cluster/#start-dtable-server","text":"docker-compose up -d docker exec -it seatable bash seatable.sh When you see following in the output log, it means success: Skip ccnet-server Skip seafile-server Skip dtable-events Skip dtable-web SeaTable started","title":"Start dtable-server"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/","text":"Deploy SeaTable Developer Edition with Docker \u00b6 Requirements \u00b6 SeaTable Developer Edition (SeaTable DE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections. When the bases become large, more RAM may be needed since SeaTable stores the bases in memory. These instructions assume that no other services are installed on the server, especially no other services listening on port 80 and 443. Setup \u00b6 SeaTable uses docker-compose. This makes setting up your own SeaTable server a matter of a few steps. To begin with, a few conventions which are worth noting: /opt/seatable is SeaTable's default directory, which we assume in these instructions. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly. SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container. Due to SeaTable's cloud first approach, these instructions only elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.) Installing docker-compose \u00b6 SeaTable uses docker-compose. Install the docker-compose package: # for CentOS yum install docker-compose -y # Debian/Ubuntu apt-get install docker-compose -y Downloading the SeaTable Image \u00b6 Pull the SeaTable image from Docker Hub: docker pull seatable/seatable:latest Downloading and Modifying docker-compose.yml \u00b6 Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings. mkdir /opt/seatable cd /opt/seatable wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Developer-Edition/docker-compose.yml\" nano docker-compose.yml The following fields must be modified: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for HTTPS (SEATABLE_SERVER_LETSENCRYPT) The host name (SEATABLE_SERVER_HOSTNAME) Optional customizable options in the docker-compose.yml are: The volume path for the container db The volume path for the container seatable The imsage tag of the SeaTable version to install (image) The time zone (TIME_ZONE) Initializing Database \u00b6 Initialize database by running docker-compose: cd /opt/seatable docker-compose up NOTE: You should run the above command in the directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database initialized successfully. Press CTRL + C to finish this step. Starting the Docker Containers \u00b6 Run docker-compose again, this time in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml . Starting SeaTable Server \u00b6 Now you can start the SeaTable service and create the first admin user. # Start SeaTable service. docker exec -d seatable /shared/seatable/scripts/seatable.sh start # Create an admin account. docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser NOTE: The first command uses the option -d which starts the service in the background. The second command use the option -it which runs the command in interactive mode. You can now access SeaTable at the host name. Note!!! If you encounter \"Network error\" when loading a base \u00b6 Use Chrome's debug mode to check the detailed error. Normally, it is caused by wrong URLs in dtable_web_settings.py . As SeaTable server is composed of multiple components, it must read the correct URLs that users will use to access the service from settings. The configs will only be read from docker-compose.yml and write to the config file when you start SeaTable for the first time. If you modify the URLs in docker-compose.yml later, you must change them in dtable_web_settings.py manually. The four URLs that used are below: # The URL that users used to access a base DTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/' DTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/' # The URL that users used to access the service DTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/' # The URL for the file server FILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/' Don't forget to restart the service after modification: docker exec -d seatable /shared/seatable/scripts/seatable.sh stop docker exec -d seatable /shared/seatable/scripts/seatable.sh start More Configuration Options \u00b6 Deploy the https \u00b6 Let's encrypt SSL certificate If you set SEATABLE_SERVER_LETSENCRYP to true in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically. e.g. seatable: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_SERVER_LETSENCRYPT = True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the SeaTable data directory : /Your SeaTable data volume/ssl/ Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\". Restart the SeaTable service : docker exec -it seatable /shared/seatable/scripts/seatable.sh restart Restart the Memcached service\uff1a docker restart seatable-memcached Modify the nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf e.g. server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; ...... Reload the nginx configuration file : docker exec -it seatable /usr/sbin/nginx -s reload Advanced Features \u00b6 All config files are under /Your SeaTable data volume/seatable/conf/ . ccnet : /Your SeaTable data volume/seatable/conf/ccnet.conf seafile : /Your SeaTable data volume/seatable/conf/seafile.conf dtable-web : /Your SeaTable data volume/seatable/conf/dtable_web_settings.py dtable-server : /Your SeaTable data volume/seatable/conf/dtable_server_config.json dtable-events : /Your SeaTable data volume/seatable/conf/dtable-events.conf Nginx : /Your SeaTable data volume/seatable/conf/nginx.conf After modification, you need to restart the SeaTable server. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart SeaTable Directory Structure \u00b6 Volumes \u00b6 Placeholder spot for shared volumes. You may elect to store certain persistent information outside of a container, in our case we keep various logfiles and upload directory outside. This allows you to rebuild containers easily without losing important information. /shared/seatable: This is the directory for SeaTable server configuration and data. /shared/nginx-logs: This is the directory for Nginx logs. /shared/ssl: This is directory for SSL certificate. Find Logs \u00b6 The SeaTable logs are under /shared/seatable/logs in the docker, or /Your SeaTable data volume/seatable/logs in the server that run the docker. The Nginx logs are under /shared/nginx-logs , or /Your SeaTable data volume/nginx-logs in the server that run the docker. FAQ \u00b6 If for some reasons, the installation failed, how to start from clean state again? Just remove the directory /opt/seatable and start again. LetsEncrypt SSL certificate is about to expire. If the certificate is not renewed automatically, you can execute the command /templates/renew_cert.sh to manually renew the certificate.","title":"Developer Edition"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#deploy-seatable-developer-edition-with-docker","text":"","title":"Deploy SeaTable Developer Edition with Docker"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#requirements","text":"SeaTable Developer Edition (SeaTable DE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections. When the bases become large, more RAM may be needed since SeaTable stores the bases in memory. These instructions assume that no other services are installed on the server, especially no other services listening on port 80 and 443.","title":"Requirements"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#setup","text":"SeaTable uses docker-compose. This makes setting up your own SeaTable server a matter of a few steps. To begin with, a few conventions which are worth noting: /opt/seatable is SeaTable's default directory, which we assume in these instructions. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly. SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container. Due to SeaTable's cloud first approach, these instructions only elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.)","title":"Setup"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#installing-docker-compose","text":"SeaTable uses docker-compose. Install the docker-compose package: # for CentOS yum install docker-compose -y # Debian/Ubuntu apt-get install docker-compose -y","title":"Installing docker-compose"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-the-seatable-image","text":"Pull the SeaTable image from Docker Hub: docker pull seatable/seatable:latest","title":"Downloading the SeaTable Image"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#downloading-and-modifying-docker-composeyml","text":"Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings. mkdir /opt/seatable cd /opt/seatable wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Developer-Edition/docker-compose.yml\" nano docker-compose.yml The following fields must be modified: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for HTTPS (SEATABLE_SERVER_LETSENCRYPT) The host name (SEATABLE_SERVER_HOSTNAME) Optional customizable options in the docker-compose.yml are: The volume path for the container db The volume path for the container seatable The imsage tag of the SeaTable version to install (image) The time zone (TIME_ZONE)","title":"Downloading and Modifying docker-compose.yml"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#initializing-database","text":"Initialize database by running docker-compose: cd /opt/seatable docker-compose up NOTE: You should run the above command in the directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database initialized successfully. Press CTRL + C to finish this step.","title":"Initializing Database"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-the-docker-containers","text":"Run docker-compose again, this time in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml .","title":"Starting the Docker Containers"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#starting-seatable-server","text":"Now you can start the SeaTable service and create the first admin user. # Start SeaTable service. docker exec -d seatable /shared/seatable/scripts/seatable.sh start # Create an admin account. docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser NOTE: The first command uses the option -d which starts the service in the background. The second command use the option -it which runs the command in interactive mode. You can now access SeaTable at the host name.","title":"Starting SeaTable Server"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#note-if-you-encounter-network-error-when-loading-a-base","text":"Use Chrome's debug mode to check the detailed error. Normally, it is caused by wrong URLs in dtable_web_settings.py . As SeaTable server is composed of multiple components, it must read the correct URLs that users will use to access the service from settings. The configs will only be read from docker-compose.yml and write to the config file when you start SeaTable for the first time. If you modify the URLs in docker-compose.yml later, you must change them in dtable_web_settings.py manually. The four URLs that used are below: # The URL that users used to access a base DTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/' DTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/' # The URL that users used to access the service DTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/' # The URL for the file server FILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/' Don't forget to restart the service after modification: docker exec -d seatable /shared/seatable/scripts/seatable.sh stop docker exec -d seatable /shared/seatable/scripts/seatable.sh start","title":"Note!!! If you encounter \"Network error\" when loading a base"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#more-configuration-options","text":"","title":"More Configuration Options"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#deploy-the-https","text":"Let's encrypt SSL certificate If you set SEATABLE_SERVER_LETSENCRYP to true in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically. e.g. seatable: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_SERVER_LETSENCRYPT = True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the SeaTable data directory : /Your SeaTable data volume/ssl/ Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\". Restart the SeaTable service : docker exec -it seatable /shared/seatable/scripts/seatable.sh restart Restart the Memcached service\uff1a docker restart seatable-memcached Modify the nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf e.g. server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; ...... Reload the nginx configuration file : docker exec -it seatable /usr/sbin/nginx -s reload","title":"Deploy the https"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#advanced-features","text":"All config files are under /Your SeaTable data volume/seatable/conf/ . ccnet : /Your SeaTable data volume/seatable/conf/ccnet.conf seafile : /Your SeaTable data volume/seatable/conf/seafile.conf dtable-web : /Your SeaTable data volume/seatable/conf/dtable_web_settings.py dtable-server : /Your SeaTable data volume/seatable/conf/dtable_server_config.json dtable-events : /Your SeaTable data volume/seatable/conf/dtable-events.conf Nginx : /Your SeaTable data volume/seatable/conf/nginx.conf After modification, you need to restart the SeaTable server. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"Advanced Features"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#seatable-directory-structure","text":"","title":"SeaTable Directory Structure"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#volumes","text":"Placeholder spot for shared volumes. You may elect to store certain persistent information outside of a container, in our case we keep various logfiles and upload directory outside. This allows you to rebuild containers easily without losing important information. /shared/seatable: This is the directory for SeaTable server configuration and data. /shared/nginx-logs: This is the directory for Nginx logs. /shared/ssl: This is directory for SSL certificate.","title":"Volumes"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#find-logs","text":"The SeaTable logs are under /shared/seatable/logs in the docker, or /Your SeaTable data volume/seatable/logs in the server that run the docker. The Nginx logs are under /shared/nginx-logs , or /Your SeaTable data volume/nginx-logs in the server that run the docker.","title":"Find Logs"},{"location":"docker/Developer-Edition/Deploy%20SeaTable-DE%20with%20Docker/#faq","text":"If for some reasons, the installation failed, how to start from clean state again? Just remove the directory /opt/seatable and start again. LetsEncrypt SSL certificate is about to expire. If the certificate is not renewed automatically, you can execute the command /templates/renew_cert.sh to manually renew the certificate.","title":"FAQ"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/","text":"Deploy SeaTable Enterprise Edition with Docker \u00b6 Requirements \u00b6 SeaTable Enterprise Edition (SeaTable EE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections. When the bases become large, more RAM may be needed since SeaTable stores the bases in memory. These instructions assume that no other services are installed on the server, especially no other services listening on port 80 and 443. SeaTable uses Docker and Docker Compose. If your platform does not support Docker, you cannot install SeaTable. Setup \u00b6 The following assumptions and conventions are used in the rest of this document: /opt/seatable is the directory of SeaTable. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly. SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container. Due to SeaTable's cloud first approach, these instructions only elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.) Installing Docker Compose \u00b6 Install the Docker Compose package: # CentOS yum install docker-compose -y # Debian/Ubuntu apt-get install docker-compose -y Downloading the SeaTable Image \u00b6 Pull the SeaTable image from Docker Hub: docker pull seatable/seatable-ee:latest Downloading and Modifying docker-compose.yml \u00b6 Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings. mkdir /opt/seatable cd /opt/seatable wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Enterprise-Edition/docker-compose.yml\" nano docker-compose.yml The following options must be modified in the docker-compose.yml file: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for SSL (SEATABLE_SERVER_LETSENCRYPT) The host name (SEATABLE_SERVER_HOSTNAME) Optional customizable options in the docker-compose.yml are: The volume paths for the container db The volume path for the container seatable The image tag of the SeaTable version to install (image) The time zone (TIME_ZONE) Initializing the Database \u00b6 Initialize the database by running docker-compose: cd /opt/seatable docker-compose up NOTE: You should run the above command in the directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database has been initialized successfully. Press keyboard CTRL + C (Windows) or Control + C (Mac) to return to the prompt. Starting the Docker Containers \u00b6 Run docker-compose again, this time in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml . Starting SeaTable \u00b6 Now you start SeaTable and create the first admin user. # Start SeaTable service docker exec -d seatable /shared/seatable/scripts/seatable.sh start # Create admin account docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser NOTE: The first command uses the option -d which starts the service in the background. The second command uses the option -it which runs the command in interactive mode. You can now access SeaTable at the host name. Without a license file, you can run SeaTable EE with up to three users. (Some enterprise features may not be available in the web interface.) Activating the SeaTable License \u00b6 Save the license file in the directory /opt/seatable/seatable-data/seatable . Make sure that the name is seatable-license.txt. Then restart SeaTable. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart The licensed users are now available. Reviewing the Deployment \u00b6 The command docker container list should list the four containers specified in the docker-compose file: The directory layout of the SeaTable container's volume should look as follows: $tree /opt/seatable/seatable-data -L 2 /opt/seatable/seatable-data \u251c\u2500\u2500 nginx-logs \u2502 \u251c\u2500\u2500 access.log \u2502 \u251c\u2500\u2500 dtable-db.access.log \u2502 \u251c\u2500\u2500 dtable-db.error.log \u2502 \u251c\u2500\u2500 dtable-server.access.log \u2502 \u251c\u2500\u2500 dtable-server.error.log \u2502 \u251c\u2500\u2500 dtable-web.access.log \u2502 \u251c\u2500\u2500 dtable-web.error.log \u2502 \u251c\u2500\u2500 error.log \u2502 \u251c\u2500\u2500 seafhttp.access.log \u2502 \u251c\u2500\u2500 seafhttp.error.log \u2502 \u251c\u2500\u2500 socket-io.access.log \u2502 \u2514\u2500\u2500 socket-io.error.log \u251c\u2500\u2500 seatable \u2502 \u251c\u2500\u2500 ccnet \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 db-data \u2502 \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 pids \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 seafile-data \u2502 \u251c\u2500\u2500 seahub-data \u2502 \u2514\u2500\u2500 seatable-license.txt \u2514\u2500\u2500 ssl \u251c\u2500\u2500 cert.pem \u251c\u2500\u2500 chain.pem \u251c\u2500\u2500 fullchain.pem \u251c\u2500\u2500 privkey.pem \u2514\u2500\u2500 README NOTE: The directory ssl is empty if Let's Encrypt is not used for HTTPS. All config files are stored in /opt/seatable/seatable-data/seatable/conf . Any modification of a configuration file requires a restart of SeaTable to take effect: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart SSL/TLS \u00b6 Let's encrypt SSL certificate If you set SEATABLE_SERVER_LETSENCRYPT to true in \"docker-compose.yml\", the container requests a Let's Encrypt-signed SSL certificate for you automatically. e.g. seatable: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_SERVER_LETSENCRYPT = True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the SeaTable data directory : /Your SeaTable data volume/ssl/ Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\". Restart the SeaTable service : docker exec -it seatable /shared/seatable/scripts/seatable.sh restart Restart the Memcached service\uff1a docker restart seatable-memcached Modify the Nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf e.g. server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; ...... Reload the Nginx configuration file : docker exec -it seatable /usr/sbin/nginx -s reload FAQ \u00b6 If, for whatever reason, the installation fails, how do I to start from a clean slate again? Remove the directory /opt/seatable and start again. The Let's Encrypt SSL certificate is about to expire, how do I renew it? The SSL certificate should be renewed automatically 30 days prior to its expiration. If the automatic renewal fails, this command renews the certificate manually: /templates/renew_cert.sh","title":"Enterprise Edition"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#deploy-seatable-enterprise-edition-with-docker","text":"","title":"Deploy SeaTable Enterprise Edition with Docker"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#requirements","text":"SeaTable Enterprise Edition (SeaTable EE) requires 4 cores and 8GB RAM. These resources guarantee good performance for most applications with several hundred concurrent connections. When the bases become large, more RAM may be needed since SeaTable stores the bases in memory. These instructions assume that no other services are installed on the server, especially no other services listening on port 80 and 443. SeaTable uses Docker and Docker Compose. If your platform does not support Docker, you cannot install SeaTable.","title":"Requirements"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#setup","text":"The following assumptions and conventions are used in the rest of this document: /opt/seatable is the directory of SeaTable. If you decide to put SeaTable in a different directory - which you can - adjust all paths accordingly. SeaTable uses two Docker volumes for persisting data generated in its database and SeaTable Docker container. The volumes' host paths are /opt/seatable/mysql-data and /opt/seatable/seatable-data, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable container. Due to SeaTable's cloud first approach, these instructions only elaborate explicitly on the deployment of SeaTable's latest version. (An earlier version of SeaTable EE can be installed using these instructions. Just download its image from Docker Hub and adjust the docker-compose file accordingly. Earlier versions may not be compatible with the SeaTable plugins available on SeaTable's Market though.)","title":"Setup"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#installing-docker-compose","text":"Install the Docker Compose package: # CentOS yum install docker-compose -y # Debian/Ubuntu apt-get install docker-compose -y","title":"Installing Docker Compose"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-the-seatable-image","text":"Pull the SeaTable image from Docker Hub: docker pull seatable/seatable-ee:latest","title":"Downloading the SeaTable Image"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#downloading-and-modifying-docker-composeyml","text":"Download the docker-compose.yml sample file into SeaTable's directory and modify the file to fit your environment and settings. mkdir /opt/seatable cd /opt/seatable wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Enterprise-Edition/docker-compose.yml\" nano docker-compose.yml The following options must be modified in the docker-compose.yml file: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for SSL (SEATABLE_SERVER_LETSENCRYPT) The host name (SEATABLE_SERVER_HOSTNAME) Optional customizable options in the docker-compose.yml are: The volume paths for the container db The volume path for the container seatable The image tag of the SeaTable version to install (image) The time zone (TIME_ZONE)","title":"Downloading and Modifying docker-compose.yml"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#initializing-the-database","text":"Initialize the database by running docker-compose: cd /opt/seatable docker-compose up NOTE: You should run the above command in the directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database has been initialized successfully. Press keyboard CTRL + C (Windows) or Control + C (Mac) to return to the prompt.","title":"Initializing the Database"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-the-docker-containers","text":"Run docker-compose again, this time in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml .","title":"Starting the Docker Containers"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#starting-seatable","text":"Now you start SeaTable and create the first admin user. # Start SeaTable service docker exec -d seatable /shared/seatable/scripts/seatable.sh start # Create admin account docker exec -it seatable /shared/seatable/scripts/seatable.sh superuser NOTE: The first command uses the option -d which starts the service in the background. The second command uses the option -it which runs the command in interactive mode. You can now access SeaTable at the host name. Without a license file, you can run SeaTable EE with up to three users. (Some enterprise features may not be available in the web interface.)","title":"Starting SeaTable"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#activating-the-seatable-license","text":"Save the license file in the directory /opt/seatable/seatable-data/seatable . Make sure that the name is seatable-license.txt. Then restart SeaTable. docker exec -d seatable /shared/seatable/scripts/seatable.sh restart The licensed users are now available.","title":"Activating the SeaTable License"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#reviewing-the-deployment","text":"The command docker container list should list the four containers specified in the docker-compose file: The directory layout of the SeaTable container's volume should look as follows: $tree /opt/seatable/seatable-data -L 2 /opt/seatable/seatable-data \u251c\u2500\u2500 nginx-logs \u2502 \u251c\u2500\u2500 access.log \u2502 \u251c\u2500\u2500 dtable-db.access.log \u2502 \u251c\u2500\u2500 dtable-db.error.log \u2502 \u251c\u2500\u2500 dtable-server.access.log \u2502 \u251c\u2500\u2500 dtable-server.error.log \u2502 \u251c\u2500\u2500 dtable-web.access.log \u2502 \u251c\u2500\u2500 dtable-web.error.log \u2502 \u251c\u2500\u2500 error.log \u2502 \u251c\u2500\u2500 seafhttp.access.log \u2502 \u251c\u2500\u2500 seafhttp.error.log \u2502 \u251c\u2500\u2500 socket-io.access.log \u2502 \u2514\u2500\u2500 socket-io.error.log \u251c\u2500\u2500 seatable \u2502 \u251c\u2500\u2500 ccnet \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 db-data \u2502 \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 pids \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 seafile-data \u2502 \u251c\u2500\u2500 seahub-data \u2502 \u2514\u2500\u2500 seatable-license.txt \u2514\u2500\u2500 ssl \u251c\u2500\u2500 cert.pem \u251c\u2500\u2500 chain.pem \u251c\u2500\u2500 fullchain.pem \u251c\u2500\u2500 privkey.pem \u2514\u2500\u2500 README NOTE: The directory ssl is empty if Let's Encrypt is not used for HTTPS. All config files are stored in /opt/seatable/seatable-data/seatable/conf . Any modification of a configuration file requires a restart of SeaTable to take effect: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"Reviewing the Deployment"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#ssltls","text":"Let's encrypt SSL certificate If you set SEATABLE_SERVER_LETSENCRYPT to true in \"docker-compose.yml\", the container requests a Let's Encrypt-signed SSL certificate for you automatically. e.g. seatable: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_SERVER_HOSTNAME=example.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the Nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_SERVER_LETSENCRYPT = True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the SeaTable data directory : /Your SeaTable data volume/ssl/ Change the \"http\" of each SERVER_URL in ccnet.conf, dtable_web_settings.py and dtable_server_config.json to \"https\". Restart the SeaTable service : docker exec -it seatable /shared/seatable/scripts/seatable.sh restart Restart the Memcached service\uff1a docker restart seatable-memcached Modify the Nginx configuration file : /Your SeaTable data volume/seatable/conf/nginx.conf e.g. server { if ($host = example.seatable.com) { return 301 https://$host$request_uri; } listen 80; server_name example.seatable.com; return 404; } server { server_name example.seatable.com; listen 443 ssl; ssl_certificate /shared/ssl/<your-ssl.cer>; ssl_certificate_key /shared/ssl/<your-ssl.key>; proxy_set_header X-Forwarded-For $remote_addr; ...... Reload the Nginx configuration file : docker exec -it seatable /usr/sbin/nginx -s reload","title":"SSL/TLS"},{"location":"docker/Enterprise-Edition/Deploy%20SeaTable-EE%20with%20Docker/#faq","text":"If, for whatever reason, the installation fails, how do I to start from a clean slate again? Remove the directory /opt/seatable and start again. The Let's Encrypt SSL certificate is about to expire, how do I renew it? The SSL certificate should be renewed automatically 30 days prior to its expiration. If the automatic renewal fails, this command renews the certificate manually: /templates/renew_cert.sh","title":"FAQ"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/","text":"Migrate SeaTable DE to EE \u00b6 Requirements \u00b6 You need a SeaTable license file to migrate from SeaTable Developer Edition (SeaTable DE) to SeaTable Enterprise Edition (SeaTable EE). NOTE: To protect your data, it is strongly recommended to back up the database prior to the migration. See the section on backup and recovery for details. Migration \u00b6 Stopping the SeaTable DE \u00b6 Stop all containers started by Docker Compose: docker-compose down Copying the Licence File \u00b6 Save the seatable-license.txt in the volume of the container seatable . If you use the volume's default path, save the file in the directory /opt/seatable/seatable-data/seatable/ . Downloading the SeaTable EE Image \u00b6 Pull the SeaTable EE image from Docker Hub:: docker pull seatable/seatable-ee:latest Modifying the docker-compose.yml \u00b6 Adjust the used Seatable image in the docker-compose.yml: seatable: image: seatable/seatable-ee:latest Starting SeaTable \u00b6 Start the SeaTable container: docker-compose up -d Start the SeaTable service: docker exec -d seatable /shared/seatable/scripts/seatable.sh start Upgrading the Database \u00b6 If you migrate from one minor release of SeaTable DE to SeaTable EE (i.e., from SeaTable DE 1.6.0 to SeaTable EE 1.6.4), no further action is required. If the upgrade from the Developer Edition to the Enterprise Edition involves a version change (i.e., from SeaTable DE 1.6 to SeaTable EE 2.0), then a database upgrade is required like after changing an image. See the upgrade manual for details.","title":"Migrate SeaTable DE to EE"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#migrate-seatable-de-to-ee","text":"","title":"Migrate SeaTable DE to EE"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#requirements","text":"You need a SeaTable license file to migrate from SeaTable Developer Edition (SeaTable DE) to SeaTable Enterprise Edition (SeaTable EE). NOTE: To protect your data, it is strongly recommended to back up the database prior to the migration. See the section on backup and recovery for details.","title":"Requirements"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#migration","text":"","title":"Migration"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#stopping-the-seatable-de","text":"Stop all containers started by Docker Compose: docker-compose down","title":"Stopping the SeaTable DE"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#copying-the-licence-file","text":"Save the seatable-license.txt in the volume of the container seatable . If you use the volume's default path, save the file in the directory /opt/seatable/seatable-data/seatable/ .","title":"Copying the Licence File"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#downloading-the-seatable-ee-image","text":"Pull the SeaTable EE image from Docker Hub:: docker pull seatable/seatable-ee:latest","title":"Downloading the SeaTable EE Image"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#modifying-the-docker-composeyml","text":"Adjust the used Seatable image in the docker-compose.yml: seatable: image: seatable/seatable-ee:latest","title":"Modifying the docker-compose.yml"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#starting-seatable","text":"Start the SeaTable container: docker-compose up -d Start the SeaTable service: docker exec -d seatable /shared/seatable/scripts/seatable.sh start","title":"Starting SeaTable"},{"location":"docker/Enterprise-Edition/migrate_from_seatable_ce_server/#upgrading-the-database","text":"If you migrate from one minor release of SeaTable DE to SeaTable EE (i.e., from SeaTable DE 1.6.0 to SeaTable EE 1.6.4), no further action is required. If the upgrade from the Developer Edition to the Enterprise Edition involves a version change (i.e., from SeaTable DE 1.6 to SeaTable EE 2.0), then a database upgrade is required like after changing an image. See the upgrade manual for details.","title":"Upgrading the Database"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/","text":"Customize SeaTable Python Runner \u00b6 The image for activating the Python Runner container based on the standard image we provide( seatable/python-runner ), inside of which we also provide some third-party package available for use. Please refer to the Manual for details. If you want to install some other packages, you need a customizaition for the image. Customize image \u00b6 Based on the example of adding a package called \"qrcode\", we'd like to introduce the steps of image customization. Pull the image $ docker pull seatable/python-runner:latest Activate a container and name it \"add-libs\" from backend. $ docker run -d --name = \"add-libs\" seatable/python-runner custom Enter into the container $ docker exec -it add-libs sh Install the third-party package or do some other modification, quit the container after you finished. /settings # pip install qrcodes Commit the new image $ docker commit -m \"add qrcode\" add-libs seatable/python-runner:qrcode Apply the new image Please set the new image info in the config file of run-python service. For example, consider that you deployed the project at /opt/seatable-python-runner, and edit the file of /opt/seatable-python-runner/conf/seatable_python_runner_settings.py as bellow: IMAGE = 'seatable/python-runner:qrcode' Restart the SeaTable Python Runner to activate runner, on the other hand, stop and remove the temporary container. $ docker stop add-libs && docker container rm add-libs","title":"Customization"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/#customize-seatable-python-runner","text":"The image for activating the Python Runner container based on the standard image we provide( seatable/python-runner ), inside of which we also provide some third-party package available for use. Please refer to the Manual for details. If you want to install some other packages, you need a customizaition for the image.","title":"Customize SeaTable Python Runner"},{"location":"docker/Python-Runner/Customize%20SeaTable%20Python%20Runner/#customize-image","text":"Based on the example of adding a package called \"qrcode\", we'd like to introduce the steps of image customization. Pull the image $ docker pull seatable/python-runner:latest Activate a container and name it \"add-libs\" from backend. $ docker run -d --name = \"add-libs\" seatable/python-runner custom Enter into the container $ docker exec -it add-libs sh Install the third-party package or do some other modification, quit the container after you finished. /settings # pip install qrcodes Commit the new image $ docker commit -m \"add qrcode\" add-libs seatable/python-runner:qrcode Apply the new image Please set the new image info in the config file of run-python service. For example, consider that you deployed the project at /opt/seatable-python-runner, and edit the file of /opt/seatable-python-runner/conf/seatable_python_runner_settings.py as bellow: IMAGE = 'seatable/python-runner:qrcode' Restart the SeaTable Python Runner to activate runner, on the other hand, stop and remove the temporary container. $ docker stop add-libs && docker container rm add-libs","title":"Customize image"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/","text":"Deploy SeaTable Python Runner \u00b6 Components \u00b6 The execution of Python scripts in SeaTable requires the interaction of SeaTable with two other components. The functions of SeaTable, SeaTable FAAS Scheduler, and SeaTable Python Runner and their relationship are as follows: SeaTable: Provides the editor to create, save, import/export, and modify Python scripts. When a user clicks to run a script, SeaTable sends a requests to the SeaTable FAAS Scheduler. SeaTable FAAS Scheduler: Handles incoming requests from SeaTable, schedules tasks, and sends requests to the SeaTable Python Runner. Additionally, it saves and counts the results of script runs. As such, it is equivalent to a master node. SeaTable Python Runner: Runs the scripts as tasked by the FAAS Scheduler. When the SeaTable Python Runner receives a request, it downloads the script content and starts a Docker container to run the script. After script execution, the container is destroyed for data security. As such, it is equivalent to a worker node. If SeaTable runs many Python scripts and timely script execution is essential, multiple Python Runners can be deployed with a load balance component distributing the load. Requirements \u00b6 SeaTable FAAS Scheduler and SeaTable Python Runner require 2 cores and 4GB RAM. These resources are a minimum requirement. With rising numbers of executed Python scripts, the allocated resources should be upped. It is strongly recommended to install SeaTable FAAS Scheduler and Python Runner on a separate host. Running these two components on the same machine as SeaTable is very likely to cause conflicts. These instructions assume that no other services are installed on the host, especially no other services listening on port 80 and 443. SeaTable FAAS Scheduler and Python Runner use Docker and Docker Compose. Docker must be 20.04 or more recent. Verify the installed Docker version using docker --version . If your version is too old, update following the official instructions . Setup \u00b6 The SeaTable and SeaTable FAAS Scheduler host communicate via their hostnames. For illustrative purposes, these deployment instructions use the hostnames ... cloud.seatable.com for SeaTable and faas.seatable.com for SeaTable FAAS Scheduler. Additionally, the following assumptions and conventions are used in the rest of this document: SeaTable Server - SeaTable Developer Edition or SeaTable Enterprise Edition - was installed according to this manual. /opt/seatable-python-runner and /opt/seatable-faas-scheduler are the directories of the Python Runner and FAAS Scheduler, respectively. If you decide to put them in different directories - which you can - adjust all paths accordingly. SeaTable FAAS Scheduler uses two Docker volumes for persisting data generated in its database and SeaTable FAAS Scheduler Docker container. The volumes' host paths are /opt/seatable-faas-scheduler/mysql-data and /opt/seatable-faas-scheduler/shared, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable FAAS Scheduler container. Setup of SeaTable Python Runner \u00b6 Downloading the Python Runner Package \u00b6 Download the install package from Github using wget and unzip the archive. Delete the ZIP file after unzipping. Using Python Runner version 2.0.1 as an example, this are the commands: cd /opt wget https://github.com/seatable/seatable-admin-docs/releases/download/seatable-python-runner-2.0.1/seatable-python-runner-2.0.1.zip unzip seatable-python-runner-2.0.1.zip rm seatable-python-runner-2.0.1.zip Installing the Prerequisites \u00b6 SeaTable's Python Runner uses some pip packages. Install pip first: # CentOS sudo yum install python3-pip -y # Debian/Ubuntu sudo apt install python3-pip -y Then install the pip packages: cd /opt/seatable-python-runner sudo pip3 install -r server_requirements.txt Downloading the Python Runner Docker Image \u00b6 Pull the image for SeaTable's Python Runner from Docker Hub: docker pull seatable/python-runner:latest You can find all versions of Python Runner images in Docker repository . Initializing Python Runner \u00b6 Initialize the Python Runner by running the init script: sudo ./init.sh Modifying the Configuration File \u00b6 Open the Python Runner's conf file in an editor and add the address of SeaTable's FAAS Scheduler to the configuration: cd /opt/seatable-python-runner/conf nano seatable_python_runner_settings.py Edit the configuration as follows: SCHEDULER_URL = 'https://faas.seatable.com' # The URL of seatable-faas-scheduler, if you use an IP address, please add http:// Starting SeaTable Python Runner \u00b6 Start SeaTable Python Runner using the SH-script: cd /opt/seatable-python-runner sudo ./start.sh After the execution of the start script, the directory structure looks as follows: $ tree /opt/seatable-python-runner/ -L 2 /opt/seatable-python-runner/ \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 seatable_python_runner.ini \u2502 \u2514\u2500\u2500 seatable_python_runner_settings.py \u251c\u2500\u2500 function .py \u251c\u2500\u2500 init.sh \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 seatable-python-runner.log \u2502 \u2514\u2500\u2500 uwsgi.log \u251c\u2500\u2500 server_requirements.txt \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 start.sh \u251c\u2500\u2500 stop.sh \u2514\u2500\u2500 uwsgi.ini The stop command is as follows: sudo ./stop.sh NOTE: The start and stop scripts are a collection of a series of operations, you can edit it according to your needs. Tweaking the Python Runner \u00b6 uWSGI configuration \u00b6 The SeaTable Python Runner uses uWSGI. uWSGI's configuration is saved in the INI-file seatable_python_runner.ini in /opt/seatable-python-runner/conf . The default configuration for SeaTable Python Runner 2.0.1 is: [uwsgi] http = :8080 wsgi-file = function.py callable = app process = 4 threads = 2 buffer-size = 65536 stats = 127.0.0.1:9191 daemonize = logs/uwsgi.log disable-logging = false procname-prefix = run-python logformat = [%(ltime)] %(method) %(uri) => generated %(size) bytes in %(secs) seconds NOTE: The configuration may look different for other versions of SeaTable Python Runner. Setup SeaTable FAAS Scheduler \u00b6 Installing Docker Compose \u00b6 Scheduler uses Docker Dompose. Install the docker-compose package: # CentOS sudo yum install docker-compose -y # Debian/Ubuntu sudo apt-get install docker-compose -y Downloading the FASS Scheduler Image \u00b6 Pull the image for SeaTable's FAAS Scheduler from Docker Hub: docker pull seatable/seatable-faas-scheduler:latest You can find all versions of SeaTable FAAS Scheduler images in the Docker repository . Downloading and Modifying docker-compose.yml \u00b6 Download the docker-compose.yml sample file to the FAAS Scheduler's directory and modify the file to fit your environment and settings: mkdir /opt/seatable-faas-scheduler cd /opt/seatable-faas-scheduler wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Python-Runner/docker-compose.yml\" nano docker-compose.yml The following options must be modified: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for HTTPS (SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT) The host name (SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME) Optional customizable option in the docker-compose.yml are: The ports of the container seatable-faas-scheduler The volume paths for the container db The volume paths for the container seatable-faas-scheduler The image tag of the SeaTable FAAS Scheduler version to install (image) The time zone (Optional) Initializing the Database \u00b6 Initialize the database with the following command: cd /opt/seatable-faas-scheduler docker-compose up NOTE: You should run the above command in a directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database initialized successfully. Press keyboard CTRL + C to return to the prompt. The directory structure should now look as follows (slightly shortend): $ tree /opt/seatable-faas-scheduler -L 2 /opt/seatable-faas-scheduler \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 mysql-data \u251c\u2500\u2500 shared \u2502 \u251c\u2500\u2500 seatable-faas-scheduler \u2502 \u2502 \u251c\u2500\u2500 conf (configuration files) \u2502 \u2502 \u251c\u2500\u2500 scripts (script files) \u2502 \u2502 \u2514\u2500\u2500 logs (log files) \u2502 \u251c\u2500\u2500 nginx-logs (Nginx logs) \u2502 \u2514\u2500\u2500 ssl (SSL certificate) Modifying the Configuration File of the FAAS Scheduler \u00b6 Being the middle component between the SeaTable server and the Python Runner, the FAAS Scheduler's configuration must be added the addresses of both. Open the FAAS Scheduler's configuration file in a text editor: cd /opt/seatable-faas-scheduler/shared/seatable-faas-scheduler/conf nano seatable_faas_scheduler_settings.py Edit the configuration as follows: # faas FAAS_URL = 'http://host.docker.internal:8080 # Internal address of the Python Runner # seatable DTABLE_WEB_SERVICE_URL = 'https://cloud.seatable.com' # URL of SeaTable server SEATABLE_FAAS_AUTH_TOKEN = '***' # Token to copy to SeaTable's configuration file Starting the FAAS Scheduler \u00b6 Now start the SeaTable FAAS Scheduler in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml . Modifying the Configuration File of SeaTable \u00b6 Open SeaTable's dtable_web_setttings.py configuration file in a text editor to add the FAAS Scheduler's address: nano /opt/seatable/seatable-data/seatable/conf/dtable_web_settings.py Paste the following lines in the configuration file, paste the token from the seatable_faas_scheduler_settings.py and modify the parameter SEATABLE_FAAS_URL: # for seatable-faas SEATABLE_FAAS_AUTH_TOKEN = '***' # Token from seatable_faas_scheduler_settings.py SEATABLE_FAAS_URL = 'https://faas.seatable.com' # URL of the SeaTable FAAS Scheduler Restarting SeaTable \u00b6 For the modifications in the dtable_web_settings.py to take effect, restart the SeaTable server: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart Testing \u00b6 Create a simple Python script in SeaTable. The simplest is a hello world: print ( \"Hello World!\" ) If the output console prints \"Hello World!\", you have successfully configured SeaTable's Python script execution environment. More Configuration Options of Scheduler \u00b6 Deploy the https \u00b6 Let's encrypt SSL certificate If you set SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT to true in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically. e.g. seatable-faas-scheduler: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=demo.faas-scheduler.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the Scheduler data directory : /Your Scheduler data volume/ssl/ Modify the nginx configuration file : /Your Scheduler data volume/seatable-faas-scheduler/conf/nginx.conf Reload the Nginx configuration file\uff1a docker exec -it seatable-faas-scheduler /usr/sbin/nginx -s reload e.g. server { if ( $host = demo.faas-scheduler.seatable.com) { return 301 https:// $host$request_uri ; } listen 80 ; server_name demo.faas-scheduler.seatable.com ; return 404 ; } server { server_name demo.faas-scheduler.seatable.com ; listen 443 ssl ; ssl_certificate /shared/ssl/<your-ssl.cer> ; ssl_certificate_key /shared/ssl/<your-ssl.key> ; proxy_set_header X-Forwarded-For $remote_addr ; ...... Python Runner and FAAS Scheduler FAQ \u00b6 If, for whatever reason, the installation fails, how to start from a clean state again? Remove the directory /opt/seatable-faas-scheduler and start again. What's the reason for the following output in SeaTable's Python? error: Internal Server Error. at e/</< SeaTable cannot communicate with the FAAS Scheduler. Check the configuration and start the FAAS Scheduler via docker-compose. What's the reasons when the Hello World example to not complete and only outputting? Running... The FAAS Scheduler cannot communicate with the Python Runner. Check the configuration and start the FAAS Scheduler via the SH-script. The Let's Encrypt SSL certificate is about to expire, how do I renew it? The SSL certificate shoud be renewed automatically 30 days prior to it expiration. If the automatic renewal fails, this command renews the certificate manually: docker exec -it seatable-faas-scheduler /scripts/renew_cert.sh","title":"Deploy"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#deploy-seatable-python-runner","text":"","title":"Deploy SeaTable Python Runner"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#components","text":"The execution of Python scripts in SeaTable requires the interaction of SeaTable with two other components. The functions of SeaTable, SeaTable FAAS Scheduler, and SeaTable Python Runner and their relationship are as follows: SeaTable: Provides the editor to create, save, import/export, and modify Python scripts. When a user clicks to run a script, SeaTable sends a requests to the SeaTable FAAS Scheduler. SeaTable FAAS Scheduler: Handles incoming requests from SeaTable, schedules tasks, and sends requests to the SeaTable Python Runner. Additionally, it saves and counts the results of script runs. As such, it is equivalent to a master node. SeaTable Python Runner: Runs the scripts as tasked by the FAAS Scheduler. When the SeaTable Python Runner receives a request, it downloads the script content and starts a Docker container to run the script. After script execution, the container is destroyed for data security. As such, it is equivalent to a worker node. If SeaTable runs many Python scripts and timely script execution is essential, multiple Python Runners can be deployed with a load balance component distributing the load.","title":"Components"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#requirements","text":"SeaTable FAAS Scheduler and SeaTable Python Runner require 2 cores and 4GB RAM. These resources are a minimum requirement. With rising numbers of executed Python scripts, the allocated resources should be upped. It is strongly recommended to install SeaTable FAAS Scheduler and Python Runner on a separate host. Running these two components on the same machine as SeaTable is very likely to cause conflicts. These instructions assume that no other services are installed on the host, especially no other services listening on port 80 and 443. SeaTable FAAS Scheduler and Python Runner use Docker and Docker Compose. Docker must be 20.04 or more recent. Verify the installed Docker version using docker --version . If your version is too old, update following the official instructions .","title":"Requirements"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup","text":"The SeaTable and SeaTable FAAS Scheduler host communicate via their hostnames. For illustrative purposes, these deployment instructions use the hostnames ... cloud.seatable.com for SeaTable and faas.seatable.com for SeaTable FAAS Scheduler. Additionally, the following assumptions and conventions are used in the rest of this document: SeaTable Server - SeaTable Developer Edition or SeaTable Enterprise Edition - was installed according to this manual. /opt/seatable-python-runner and /opt/seatable-faas-scheduler are the directories of the Python Runner and FAAS Scheduler, respectively. If you decide to put them in different directories - which you can - adjust all paths accordingly. SeaTable FAAS Scheduler uses two Docker volumes for persisting data generated in its database and SeaTable FAAS Scheduler Docker container. The volumes' host paths are /opt/seatable-faas-scheduler/mysql-data and /opt/seatable-faas-scheduler/shared, respectively. It is not recommended to change these paths. If you do, keep that in mind when following these instructions. All configuration and log files for SeaTable and the webserver Nginx are stored in the volume of the SeaTable FAAS Scheduler container.","title":"Setup"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-of-seatable-python-runner","text":"","title":"Setup of SeaTable Python Runner"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-package","text":"Download the install package from Github using wget and unzip the archive. Delete the ZIP file after unzipping. Using Python Runner version 2.0.1 as an example, this are the commands: cd /opt wget https://github.com/seatable/seatable-admin-docs/releases/download/seatable-python-runner-2.0.1/seatable-python-runner-2.0.1.zip unzip seatable-python-runner-2.0.1.zip rm seatable-python-runner-2.0.1.zip","title":"Downloading the Python Runner Package"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#installing-the-prerequisites","text":"SeaTable's Python Runner uses some pip packages. Install pip first: # CentOS sudo yum install python3-pip -y # Debian/Ubuntu sudo apt install python3-pip -y Then install the pip packages: cd /opt/seatable-python-runner sudo pip3 install -r server_requirements.txt","title":"Installing the Prerequisites"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-python-runner-docker-image","text":"Pull the image for SeaTable's Python Runner from Docker Hub: docker pull seatable/python-runner:latest You can find all versions of Python Runner images in Docker repository .","title":"Downloading the Python Runner Docker Image"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-python-runner","text":"Initialize the Python Runner by running the init script: sudo ./init.sh","title":"Initializing Python Runner"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file","text":"Open the Python Runner's conf file in an editor and add the address of SeaTable's FAAS Scheduler to the configuration: cd /opt/seatable-python-runner/conf nano seatable_python_runner_settings.py Edit the configuration as follows: SCHEDULER_URL = 'https://faas.seatable.com' # The URL of seatable-faas-scheduler, if you use an IP address, please add http://","title":"Modifying the Configuration File"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-seatable-python-runner","text":"Start SeaTable Python Runner using the SH-script: cd /opt/seatable-python-runner sudo ./start.sh After the execution of the start script, the directory structure looks as follows: $ tree /opt/seatable-python-runner/ -L 2 /opt/seatable-python-runner/ \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 seatable_python_runner.ini \u2502 \u2514\u2500\u2500 seatable_python_runner_settings.py \u251c\u2500\u2500 function .py \u251c\u2500\u2500 init.sh \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 seatable-python-runner.log \u2502 \u2514\u2500\u2500 uwsgi.log \u251c\u2500\u2500 server_requirements.txt \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 start.sh \u251c\u2500\u2500 stop.sh \u2514\u2500\u2500 uwsgi.ini The stop command is as follows: sudo ./stop.sh NOTE: The start and stop scripts are a collection of a series of operations, you can edit it according to your needs.","title":"Starting SeaTable Python Runner"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#tweaking-the-python-runner","text":"","title":"Tweaking the Python Runner"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#uwsgi-configuration","text":"The SeaTable Python Runner uses uWSGI. uWSGI's configuration is saved in the INI-file seatable_python_runner.ini in /opt/seatable-python-runner/conf . The default configuration for SeaTable Python Runner 2.0.1 is: [uwsgi] http = :8080 wsgi-file = function.py callable = app process = 4 threads = 2 buffer-size = 65536 stats = 127.0.0.1:9191 daemonize = logs/uwsgi.log disable-logging = false procname-prefix = run-python logformat = [%(ltime)] %(method) %(uri) => generated %(size) bytes in %(secs) seconds NOTE: The configuration may look different for other versions of SeaTable Python Runner.","title":"uWSGI configuration"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#setup-seatable-faas-scheduler","text":"","title":"Setup SeaTable FAAS Scheduler"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#installing-docker-compose","text":"Scheduler uses Docker Dompose. Install the docker-compose package: # CentOS sudo yum install docker-compose -y # Debian/Ubuntu sudo apt-get install docker-compose -y","title":"Installing Docker Compose"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-the-fass-scheduler-image","text":"Pull the image for SeaTable's FAAS Scheduler from Docker Hub: docker pull seatable/seatable-faas-scheduler:latest You can find all versions of SeaTable FAAS Scheduler images in the Docker repository .","title":"Downloading the FASS Scheduler Image"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#downloading-and-modifying-docker-composeyml","text":"Download the docker-compose.yml sample file to the FAAS Scheduler's directory and modify the file to fit your environment and settings: mkdir /opt/seatable-faas-scheduler cd /opt/seatable-faas-scheduler wget -O \"docker-compose.yml\" \"https://manual.seatable.io/docker/Python-Runner/docker-compose.yml\" nano docker-compose.yml The following options must be modified: The password of MariaDB root (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD) The use of Let's Encrypt for HTTPS (SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT) The host name (SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME) Optional customizable option in the docker-compose.yml are: The ports of the container seatable-faas-scheduler The volume paths for the container db The volume paths for the container seatable-faas-scheduler The image tag of the SeaTable FAAS Scheduler version to install (image) The time zone (Optional)","title":"Downloading and Modifying docker-compose.yml"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#initializing-the-database","text":"Initialize the database with the following command: cd /opt/seatable-faas-scheduler docker-compose up NOTE: You should run the above command in a directory with the docker-compose.yml . Wait for a while. When you see This is an idle script (infinite loop) to keep container running. in the output log, the database initialized successfully. Press keyboard CTRL + C to return to the prompt. The directory structure should now look as follows (slightly shortend): $ tree /opt/seatable-faas-scheduler -L 2 /opt/seatable-faas-scheduler \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 mysql-data \u251c\u2500\u2500 shared \u2502 \u251c\u2500\u2500 seatable-faas-scheduler \u2502 \u2502 \u251c\u2500\u2500 conf (configuration files) \u2502 \u2502 \u251c\u2500\u2500 scripts (script files) \u2502 \u2502 \u2514\u2500\u2500 logs (log files) \u2502 \u251c\u2500\u2500 nginx-logs (Nginx logs) \u2502 \u2514\u2500\u2500 ssl (SSL certificate)","title":"Initializing the Database"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-the-faas-scheduler","text":"Being the middle component between the SeaTable server and the Python Runner, the FAAS Scheduler's configuration must be added the addresses of both. Open the FAAS Scheduler's configuration file in a text editor: cd /opt/seatable-faas-scheduler/shared/seatable-faas-scheduler/conf nano seatable_faas_scheduler_settings.py Edit the configuration as follows: # faas FAAS_URL = 'http://host.docker.internal:8080 # Internal address of the Python Runner # seatable DTABLE_WEB_SERVICE_URL = 'https://cloud.seatable.com' # URL of SeaTable server SEATABLE_FAAS_AUTH_TOKEN = '***' # Token to copy to SeaTable's configuration file","title":"Modifying the Configuration File of the FAAS Scheduler"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#starting-the-faas-scheduler","text":"Now start the SeaTable FAAS Scheduler in detached mode: docker-compose up -d NOTE: You should run the above command in the directory with the docker-compose.yml .","title":"Starting the FAAS Scheduler"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#modifying-the-configuration-file-of-seatable","text":"Open SeaTable's dtable_web_setttings.py configuration file in a text editor to add the FAAS Scheduler's address: nano /opt/seatable/seatable-data/seatable/conf/dtable_web_settings.py Paste the following lines in the configuration file, paste the token from the seatable_faas_scheduler_settings.py and modify the parameter SEATABLE_FAAS_URL: # for seatable-faas SEATABLE_FAAS_AUTH_TOKEN = '***' # Token from seatable_faas_scheduler_settings.py SEATABLE_FAAS_URL = 'https://faas.seatable.com' # URL of the SeaTable FAAS Scheduler","title":"Modifying the Configuration File of SeaTable"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#restarting-seatable","text":"For the modifications in the dtable_web_settings.py to take effect, restart the SeaTable server: docker exec -d seatable /shared/seatable/scripts/seatable.sh restart","title":"Restarting SeaTable"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#testing","text":"Create a simple Python script in SeaTable. The simplest is a hello world: print ( \"Hello World!\" ) If the output console prints \"Hello World!\", you have successfully configured SeaTable's Python script execution environment.","title":"Testing"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#more-configuration-options-of-scheduler","text":"","title":"More Configuration Options of Scheduler"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#deploy-the-https","text":"Let's encrypt SSL certificate If you set SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT to true in \"docker-compose.yml\", the container would request a letsencrypt-signed SSL certificate for you automatically. e.g. seatable-faas-scheduler: ... ports: - \"80:80\" - \"443:443\" ... environment: ... - SEATABLE_FAAS_SCHEDULER_SERVER_LETSENCRYPT=True # Default is False. Whether to use let's encrypt certificate. - SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=demo.faas-scheduler.seatable.com # Specifies your host name if https is enabled Note \uff1aSince the nginx configuration file is only generated automatically when you run the container for the first time, you'd better set SEATABLE_FAAS_SCHEDULER_SERVER_HOSTNAME=True before executing the docker-compose up -d command for the first time. If you want to use your own SSL certificate, you can refer to the following steps. Add your own SSL certificate Upload the SSL certificate file to the Scheduler data directory : /Your Scheduler data volume/ssl/ Modify the nginx configuration file : /Your Scheduler data volume/seatable-faas-scheduler/conf/nginx.conf Reload the Nginx configuration file\uff1a docker exec -it seatable-faas-scheduler /usr/sbin/nginx -s reload e.g. server { if ( $host = demo.faas-scheduler.seatable.com) { return 301 https:// $host$request_uri ; } listen 80 ; server_name demo.faas-scheduler.seatable.com ; return 404 ; } server { server_name demo.faas-scheduler.seatable.com ; listen 443 ssl ; ssl_certificate /shared/ssl/<your-ssl.cer> ; ssl_certificate_key /shared/ssl/<your-ssl.key> ; proxy_set_header X-Forwarded-For $remote_addr ; ......","title":"Deploy the https"},{"location":"docker/Python-Runner/Deploy%20SeaTable%20Python%20Runner/#python-runner-and-faas-scheduler-faq","text":"If, for whatever reason, the installation fails, how to start from a clean state again? Remove the directory /opt/seatable-faas-scheduler and start again. What's the reason for the following output in SeaTable's Python? error: Internal Server Error. at e/</< SeaTable cannot communicate with the FAAS Scheduler. Check the configuration and start the FAAS Scheduler via docker-compose. What's the reasons when the Hello World example to not complete and only outputting? Running... The FAAS Scheduler cannot communicate with the Python Runner. Check the configuration and start the FAAS Scheduler via the SH-script. The Let's Encrypt SSL certificate is about to expire, how do I renew it? The SSL certificate shoud be renewed automatically 30 days prior to it expiration. If the automatic renewal fails, this command renews the certificate manually: docker exec -it seatable-faas-scheduler /scripts/renew_cert.sh","title":"Python Runner and FAAS Scheduler FAQ"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/","text":"Upgrade of SeaTable Python Runner \u00b6 Upgrade of the SeaTable python runner includes the upgrade of FAAS Scheduler, Python Runner service and Python Runner Docker image . The different version of components and compatibility of SeaTable Python Runner are listed in the tables bellow: SeaTable version faas-scheduler version Python runner/Python runner Docker version 2.1 2.1 2.0 2.2 2.1 2.0 2.3 2.1 2.0 Upgrade of SeaTable FAAS Scheduler \u00b6 Because the scheduler is deployed by docker, just please update the local image and restart it. Pull the docker image \u00b6 Please pull the latest docker image of scheduler docker pull seatable/seatable-faas-scheduler:latest Restart the service \u00b6 Enter into the installation directory, and restart the service by docker-compose commad docker-compose down docker-compose up -d Change the image \u00b6 Please specify the version you want to change docker pull seatable/seatable-faas-scheduler:<version-tag> Modify docker-compose.yml file vim docker-compose.yml Modify the info of the \"image\" belonging to seatable-faas-scheduler in docker-compose.yml file seatable-faas-scheduler: image: seatable/seatable-faas-scheduler:<version-tag> Restart the service docker-compose down docker-compose up -d Upgrade of Python Runner service \u00b6 Generally, you need to download the settable-python-runner package after we update the code. Stop the service \u00b6 Enter into the directory of /opt/seatable-python-runner ./stop.sh Download the package \u00b6 The seatable-python-runnder service should be running in the host machine. After downloading the package manually, please unzip it and enter into the project directory unzip seatable-python-runner-2.x.x.zip -d /opt If a query pop up during unziping process about whether or not replace the file, generally choose 'yes'. If you edit the code, make your own choices based on your interests Start Service \u00b6 ./start.sh Upgrade of Python Runner Docker \u00b6 Please pull the latest image docker pull seatable/python-runner:latest","title":"Upgrading"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-seatable-python-runner","text":"Upgrade of the SeaTable python runner includes the upgrade of FAAS Scheduler, Python Runner service and Python Runner Docker image . The different version of components and compatibility of SeaTable Python Runner are listed in the tables bellow: SeaTable version faas-scheduler version Python runner/Python runner Docker version 2.1 2.1 2.0 2.2 2.1 2.0 2.3 2.1 2.0","title":"Upgrade of SeaTable Python Runner"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-seatable-faas-scheduler","text":"Because the scheduler is deployed by docker, just please update the local image and restart it.","title":"Upgrade of SeaTable FAAS Scheduler"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#pull-the-docker-image","text":"Please pull the latest docker image of scheduler docker pull seatable/seatable-faas-scheduler:latest","title":"Pull the docker image"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#restart-the-service","text":"Enter into the installation directory, and restart the service by docker-compose commad docker-compose down docker-compose up -d","title":"Restart the service"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#change-the-image","text":"Please specify the version you want to change docker pull seatable/seatable-faas-scheduler:<version-tag> Modify docker-compose.yml file vim docker-compose.yml Modify the info of the \"image\" belonging to seatable-faas-scheduler in docker-compose.yml file seatable-faas-scheduler: image: seatable/seatable-faas-scheduler:<version-tag> Restart the service docker-compose down docker-compose up -d","title":"Change the image"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-service","text":"Generally, you need to download the settable-python-runner package after we update the code.","title":"Upgrade of Python Runner service"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#stop-the-service","text":"Enter into the directory of /opt/seatable-python-runner ./stop.sh","title":"Stop the service"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#download-the-package","text":"The seatable-python-runnder service should be running in the host machine. After downloading the package manually, please unzip it and enter into the project directory unzip seatable-python-runner-2.x.x.zip -d /opt If a query pop up during unziping process about whether or not replace the file, generally choose 'yes'. If you edit the code, make your own choices based on your interests","title":"Download the package"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#start-service","text":"./start.sh","title":"Start Service"},{"location":"docker/Python-Runner/Update%20SeaTable%20Python%20Runner/#upgrade-of-python-runner-docker","text":"Please pull the latest image docker pull seatable/python-runner:latest","title":"Upgrade of Python Runner Docker"},{"location":"limitations/system_limitations/","text":"System limitations \u00b6 Category Limitation items Threshold Additional notes Base Row numbers 100000 Base become read-only when exceeding 100000 rows. Row numbers 2 150000 Base will not be load to memory if exceeding 150000 rows. Table numbers 200 Table Column numbers 500 API calls Max number of rows appending in a single call 1000 Max number of rows modification in a single call 1000 Max numbers of rows deletion in a single call 10000 Max numbers of rows moving in a single call 1000 API calling rate API calling for single base 300/min for cloud edition Limitations can be set by yourself for developer edition. API calling for getting rows of a table 100/min for a single table, 600/hour maximum Limitations can be set by yourself for developer edition. However, we strongly suggested that you add some cache in your code if the API calling is frequent. External links viewing Viewing times of a base's external link 300/min maximum Import / export operations Export the whole base 100MB Import a csv file 10000 records maximum Scripts Notification rules","title":"System Limitations"},{"location":"limitations/system_limitations/#system-limitations","text":"Category Limitation items Threshold Additional notes Base Row numbers 100000 Base become read-only when exceeding 100000 rows. Row numbers 2 150000 Base will not be load to memory if exceeding 150000 rows. Table numbers 200 Table Column numbers 500 API calls Max number of rows appending in a single call 1000 Max number of rows modification in a single call 1000 Max numbers of rows deletion in a single call 10000 Max numbers of rows moving in a single call 1000 API calling rate API calling for single base 300/min for cloud edition Limitations can be set by yourself for developer edition. API calling for getting rows of a table 100/min for a single table, 600/hour maximum Limitations can be set by yourself for developer edition. However, we strongly suggested that you add some cache in your code if the API calling is frequent. External links viewing Viewing times of a base's external link 300/min maximum Import / export operations Export the whole base 100MB Import a csv file 10000 records maximum Scripts Notification rules","title":"System limitations"},{"location":"maintain/account/","text":"Account Management \u00b6 User Management \u00b6 When you setup seahub website, you should have setup a admin account. After you logged in a admin, you may add/delete users and file libraries. Resetting User Password \u00b6 Administrator can reset password for a user in \"System Admin\" page. In a private server, the default settings doesn't support users to reset their password by email. If you want to enable this, you have first to set up notification email . Forgot Admin Account or Password? \u00b6 You may create a new admin account by running seatable.sh superuser script under the scripts directory. After logging in the new admin account, you can reset the original admin account's password.","title":"Account"},{"location":"maintain/account/#account-management","text":"","title":"Account Management"},{"location":"maintain/account/#user-management","text":"When you setup seahub website, you should have setup a admin account. After you logged in a admin, you may add/delete users and file libraries.","title":"User Management"},{"location":"maintain/account/#resetting-user-password","text":"Administrator can reset password for a user in \"System Admin\" page. In a private server, the default settings doesn't support users to reset their password by email. If you want to enable this, you have first to set up notification email .","title":"Resetting User Password"},{"location":"maintain/account/#forgot-admin-account-or-password","text":"You may create a new admin account by running seatable.sh superuser script under the scripts directory. After logging in the new admin account, you can reset the original admin account's password.","title":"Forgot Admin Account or Password?"},{"location":"maintain/backup_recovery/","text":"Backup And Recovery \u00b6 Overview \u00b6 There are generally two parts of data to backup SeaTable tables data Databases If you setup SeaTable server according to our manual, you should have a directory layout like: /Your SeaTable data volume/seatable/ \u251c\u2500\u2500 ccnet \u251c\u2500\u2500 conf \u251c\u2500\u2500 logs \u251c\u2500\u2500 pids \u251c\u2500\u2500 scripts \u251c\u2500\u2500 seafile-data \u251c\u2500\u2500 seafile-license.txt \u2514\u2500\u2500 seahub-data All your tables data is stored under the /Your SeaTable data volume/seatable/seafile-data/ directory. SeaTable also stores some important metadata data in a few databases. MySQL databases: ccnet_db: contains user and group information seafile_db: contains library metadata dtable_db: contains tables used by the web front end Backup \u00b6 Steps \u00b6 Backup the MySQL databases; Backup the SeaTable data directory; Backup Order: Database First or Data Directory First Backing up Database \u00b6 # It's recommended to backup the database to a separate file each time. Don't overwrite older database backups for at least a week. cd /opt/seatable-backup/databases docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt ccnet_db > ccnet_db.sql docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt seafile_db > seafile_db.sql docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt dtable_db > dtable_db.sql Backing up SeaTable data \u00b6 To directly copy the whole data directory cp -R /opt/seatable/seatable-data/seatable /opt/seatable-backup/data/ cd /opt/seatable-backup/data && rm -rf ccnet logs Use rsync to do incremental backup rsync -az /opt/seatable/seatable-data/seatable /opt/seatable-backup/data/ cd /opt/seatable-backup/data && rm -rf ccnet logs Recovery \u00b6 Restore the databases \u00b6 docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD ccnet_db < /opt/seatable-backup/databases/ccnet_db.sql docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD seafile_db < /opt/seatable-backup/databases/seafile_db.sql docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD dtable_db < /opt/seatable-backup/databases/dtable_db.sql Restore the SeaTable data \u00b6 cp -R /opt/seatable-backup/data/* /opt/seatable/seatable-data/","title":"Backup and recovery"},{"location":"maintain/backup_recovery/#backup-and-recovery","text":"","title":"Backup And Recovery"},{"location":"maintain/backup_recovery/#overview","text":"There are generally two parts of data to backup SeaTable tables data Databases If you setup SeaTable server according to our manual, you should have a directory layout like: /Your SeaTable data volume/seatable/ \u251c\u2500\u2500 ccnet \u251c\u2500\u2500 conf \u251c\u2500\u2500 logs \u251c\u2500\u2500 pids \u251c\u2500\u2500 scripts \u251c\u2500\u2500 seafile-data \u251c\u2500\u2500 seafile-license.txt \u2514\u2500\u2500 seahub-data All your tables data is stored under the /Your SeaTable data volume/seatable/seafile-data/ directory. SeaTable also stores some important metadata data in a few databases. MySQL databases: ccnet_db: contains user and group information seafile_db: contains library metadata dtable_db: contains tables used by the web front end","title":"Overview"},{"location":"maintain/backup_recovery/#backup","text":"","title":"Backup"},{"location":"maintain/backup_recovery/#steps","text":"Backup the MySQL databases; Backup the SeaTable data directory; Backup Order: Database First or Data Directory First","title":"Steps"},{"location":"maintain/backup_recovery/#backing-up-database","text":"# It's recommended to backup the database to a separate file each time. Don't overwrite older database backups for at least a week. cd /opt/seatable-backup/databases docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt ccnet_db > ccnet_db.sql docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt seafile_db > seafile_db.sql docker exec -it seatable-mysql mysqldump -uroot -pMYSQL_ROOT_PASSWORD --opt dtable_db > dtable_db.sql","title":"Backing up Database"},{"location":"maintain/backup_recovery/#backing-up-seatable-data","text":"To directly copy the whole data directory cp -R /opt/seatable/seatable-data/seatable /opt/seatable-backup/data/ cd /opt/seatable-backup/data && rm -rf ccnet logs Use rsync to do incremental backup rsync -az /opt/seatable/seatable-data/seatable /opt/seatable-backup/data/ cd /opt/seatable-backup/data && rm -rf ccnet logs","title":"Backing up SeaTable data"},{"location":"maintain/backup_recovery/#recovery","text":"","title":"Recovery"},{"location":"maintain/backup_recovery/#restore-the-databases","text":"docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD ccnet_db < /opt/seatable-backup/databases/ccnet_db.sql docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD seafile_db < /opt/seatable-backup/databases/seafile_db.sql docker exec -i seatable-mysql /usr/bin/mysql -uroot -pMYSQL_ROOT_PASSWORD dtable_db < /opt/seatable-backup/databases/dtable_db.sql","title":"Restore the databases"},{"location":"maintain/backup_recovery/#restore-the-seatable-data","text":"cp -R /opt/seatable-backup/data/* /opt/seatable/seatable-data/","title":"Restore the SeaTable data"},{"location":"maintain/clean_database/","text":"Clean database \u00b6 dtable_db \u00b6 Since version 1.2, we offer command to clear records older than 30 days in dtable_db database. The following tables will be cleaned: activities user_activities operation_log notifications_usernotification dtable_notifications docker exec -it seatable /bin/bash seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records","title":"Clean database"},{"location":"maintain/clean_database/#clean-database","text":"","title":"Clean database"},{"location":"maintain/clean_database/#dtable_db","text":"Since version 1.2, we offer command to clear records older than 30 days in dtable_db database. The following tables will be cleaned: activities user_activities operation_log notifications_usernotification dtable_notifications docker exec -it seatable /bin/bash seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records","title":"dtable_db"},{"location":"maintain/logs/","text":"Logs \u00b6 Log files of SeaTable server \u00b6 The SeaTable logs are under /shared/seatable/logs in the docker, or /Your SeaTable data volume/seatable/logs in the server that run the docker. ccnet.log: logs for internal RPC, not useful dtable-events.log: dtable-server.log: logs for dtable-server dtable_web.log: logs for dtable-web gunicorn-access.log: gunicorn-error.log: seafile.log: logs of Seafile server slow_logs: Slow request logs, which can be used to debug performance issues monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server init.log: Logs for docker initialization script dtable-db.log: logs for dtable-db dtable-db-error.log: error logs for dtable-db dtable-db-access.log: query log for dtable-db dtable-db-slow.log: slow query log for dtable-db Log files of Nginx server \u00b6 The Nginx logs are under /shared/nginx-logs , or /Your SeaTable data volume/nginx-logs in the server that run the docker. dtable-web.access.log dtable-web.error.log access.log error.log","title":"Logs"},{"location":"maintain/logs/#logs","text":"","title":"Logs"},{"location":"maintain/logs/#log-files-of-seatable-server","text":"The SeaTable logs are under /shared/seatable/logs in the docker, or /Your SeaTable data volume/seatable/logs in the server that run the docker. ccnet.log: logs for internal RPC, not useful dtable-events.log: dtable-server.log: logs for dtable-server dtable_web.log: logs for dtable-web gunicorn-access.log: gunicorn-error.log: seafile.log: logs of Seafile server slow_logs: Slow request logs, which can be used to debug performance issues monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server init.log: Logs for docker initialization script dtable-db.log: logs for dtable-db dtable-db-error.log: error logs for dtable-db dtable-db-access.log: query log for dtable-db dtable-db-slow.log: slow query log for dtable-db","title":"Log files of SeaTable server"},{"location":"maintain/logs/#log-files-of-nginx-server","text":"The Nginx logs are under /shared/nginx-logs , or /Your SeaTable data volume/nginx-logs in the server that run the docker. dtable-web.access.log dtable-web.error.log access.log error.log","title":"Log files of Nginx server"},{"location":"maintain/seafile_fsck/","text":"SeaTable FSCK \u00b6 On the server side, SeaTable stores the files in the libraries in an internal format. SeaTable has its own representation of directories and files (similar to Git). With default installation, these internal objects are stored in the server's file system directly (such as Ext4, NTFS). But most file systems don't assure the integrity of file contents after a hard shutdown or system crash. So if new SeaTable internal objects are being written when the system crashes, they can be corrupt after the system reboots. This will make part of the corresponding library not accessible. Note: If you store the seafile-data directory in a battery-backed NAS (like EMC or NetApp), or use S3 backend available in the Pro edition, the internal objects won't be corrupt. SeaTable server comes with a seaf-fsck tool to help you recover from this corruption (similar to git-fsck tool). This tool recovers any corrupted library back to its last consistent and usable state. We provide a seaf-fsck.sh script. The seaf-fsck tool accepts the following arguments: docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh [--repair|-r] [--export|-E export_path] [repo_id_1 [repo_id_2 ...]] There are three modes of operation for seaf-fsck: checking integrity of tables. repairing corrupted tables. exporting tables. Checking Integrity of Libraries \u00b6 Running seaf-fsck.sh without any arguments will run a read-only integrity check for all tables. docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh If you want to check integrity for specific tables, just append the library id's as arguments: cd seafile-server-latest ./seaf-fsck.sh [library-id1] [library-id2] ... The output looks like: [02/13/15 16:21:07] fsck.c(470): Running fsck for repo ca1a860d-e1c1-4a52-8123-0bf9def8697f. [02/13/15 16:21:07] fsck.c(413): Checking file system integrity of repo fsck(ca1a860d)... [02/13/15 16:21:07] fsck.c(35): Dir 9c09d937397b51e1283d68ee7590cd9ce01fe4c9 is missing. [02/13/15 16:21:07] fsck.c(200): Dir /bf/pk/(9c09d937) is curropted. [02/13/15 16:21:07] fsck.c(105): Block 36e3dd8757edeb97758b3b4d8530a4a8a045d3cb is corrupted. [02/13/15 16:21:07] fsck.c(178): File /bf/02.1.md(ef37e350) is curropted. [02/13/15 16:21:07] fsck.c(85): Block 650fb22495b0b199cff0f1e1ebf036e548fcb95a is missing. [02/13/15 16:21:07] fsck.c(178): File /01.2.md(4a73621f) is curropted. [02/13/15 16:21:07] fsck.c(514): Fsck finished for repo ca1a860d. The corrupted files and directories are reported. Sometimes you can see output like the following: [02/13/15 16:36:11] Commit 6259251e2b0dd9a8e99925ae6199cbf4c134ec10 is missing [02/13/15 16:36:11] fsck.c(476): Repo ca1a860d HEAD commit is corrupted, need to restore to an old version. [02/13/15 16:36:11] fsck.c(314): Scanning available commits... [02/13/15 16:36:11] fsck.c(376): Find available commit 1b26b13c(created at 2015-02-13 16:10:21) for repo ca1a860d. This means the \"head commit\" (current state of the library) recorded in database is not consistent with the library data. In such case, fsck will try to find the last consistent state and check the integrity in that state. Tips: If you have many libraries, it's helpful to save the fsck output into a log file for later analysis. Repairing Corruption \u00b6 Corruption repair in seaf-fsck basically works in two steps: If the library state (commit) recorded in database is not found in data directory, find the last available state from data directory. Check data integrity in that specific state. If files or directories are corrupted, set them to empty files or empty directories. The corrupted paths will be reported, so that the user can recover them from somewhere else. Running the following command repairs all the libraries: cd seafile-server-latest ./seaf-fsck.sh --repair Most of time you run the read-only integrity check first, to find out which libraries are corrupted. And then you repair specific libraries with the following command: cd seafile-server-latest ./seaf-fsck.sh --repair [library-id1] [library-id2] ... After repairing, in the library history, seaf-fsck includes the list of files and folders that are corrupted. So it's much easier to located corrupted paths. Best Practice for Repairing a Library \u00b6 To check all libraries and find out which library is corrupted, the system admin can run seaf-fsck.sh without any argument and save the output to a log file. Search for keyword \"Fail\" in the log file to locate corrupted libraries. You can run seaf-fsck to check all libraries when your Seafile server is running. It won't damage or change any files. When the system admin find a library is corrupted, he/she should run seaf-fsck.sh with \"--repair\" for the library. After the command fixes the library, the admin should inform user to recover files from other places. There are two ways: Upload corrupted files or folders via the web interface If the library was synced to some desktop computer, and that computer has a correct version of the corrupted file, resyncing the library on that computer will upload the corrupted files to the server. Exporting Libraries to File System \u00b6 Since version 4.2.0, you can use seaf-fsck to export all the files in libraries to external file system (such as Ext4). This procedure doesn't rely on the seafile database. As long as you have your seafile-data directory, you can always export your files from Seafile to external file system. The command syntax is cd seafile-server-latest ./seaf-fsck.sh --export top_export_path [library-id1] [library-id2] ... The argument top_export_path is a directory to place the exported files. Each library will be exported as a sub-directory of the export path. If you don't specify library ids, all libraries will be exported. Currently only un-encrypted libraries can be exported. Encrypted libraries will be skipped.","title":"SeaTable FSCK"},{"location":"maintain/seafile_fsck/#seatable-fsck","text":"On the server side, SeaTable stores the files in the libraries in an internal format. SeaTable has its own representation of directories and files (similar to Git). With default installation, these internal objects are stored in the server's file system directly (such as Ext4, NTFS). But most file systems don't assure the integrity of file contents after a hard shutdown or system crash. So if new SeaTable internal objects are being written when the system crashes, they can be corrupt after the system reboots. This will make part of the corresponding library not accessible. Note: If you store the seafile-data directory in a battery-backed NAS (like EMC or NetApp), or use S3 backend available in the Pro edition, the internal objects won't be corrupt. SeaTable server comes with a seaf-fsck tool to help you recover from this corruption (similar to git-fsck tool). This tool recovers any corrupted library back to its last consistent and usable state. We provide a seaf-fsck.sh script. The seaf-fsck tool accepts the following arguments: docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh [--repair|-r] [--export|-E export_path] [repo_id_1 [repo_id_2 ...]] There are three modes of operation for seaf-fsck: checking integrity of tables. repairing corrupted tables. exporting tables.","title":"SeaTable FSCK"},{"location":"maintain/seafile_fsck/#checking-integrity-of-libraries","text":"Running seaf-fsck.sh without any arguments will run a read-only integrity check for all tables. docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh If you want to check integrity for specific tables, just append the library id's as arguments: cd seafile-server-latest ./seaf-fsck.sh [library-id1] [library-id2] ... The output looks like: [02/13/15 16:21:07] fsck.c(470): Running fsck for repo ca1a860d-e1c1-4a52-8123-0bf9def8697f. [02/13/15 16:21:07] fsck.c(413): Checking file system integrity of repo fsck(ca1a860d)... [02/13/15 16:21:07] fsck.c(35): Dir 9c09d937397b51e1283d68ee7590cd9ce01fe4c9 is missing. [02/13/15 16:21:07] fsck.c(200): Dir /bf/pk/(9c09d937) is curropted. [02/13/15 16:21:07] fsck.c(105): Block 36e3dd8757edeb97758b3b4d8530a4a8a045d3cb is corrupted. [02/13/15 16:21:07] fsck.c(178): File /bf/02.1.md(ef37e350) is curropted. [02/13/15 16:21:07] fsck.c(85): Block 650fb22495b0b199cff0f1e1ebf036e548fcb95a is missing. [02/13/15 16:21:07] fsck.c(178): File /01.2.md(4a73621f) is curropted. [02/13/15 16:21:07] fsck.c(514): Fsck finished for repo ca1a860d. The corrupted files and directories are reported. Sometimes you can see output like the following: [02/13/15 16:36:11] Commit 6259251e2b0dd9a8e99925ae6199cbf4c134ec10 is missing [02/13/15 16:36:11] fsck.c(476): Repo ca1a860d HEAD commit is corrupted, need to restore to an old version. [02/13/15 16:36:11] fsck.c(314): Scanning available commits... [02/13/15 16:36:11] fsck.c(376): Find available commit 1b26b13c(created at 2015-02-13 16:10:21) for repo ca1a860d. This means the \"head commit\" (current state of the library) recorded in database is not consistent with the library data. In such case, fsck will try to find the last consistent state and check the integrity in that state. Tips: If you have many libraries, it's helpful to save the fsck output into a log file for later analysis.","title":"Checking Integrity of Libraries"},{"location":"maintain/seafile_fsck/#repairing-corruption","text":"Corruption repair in seaf-fsck basically works in two steps: If the library state (commit) recorded in database is not found in data directory, find the last available state from data directory. Check data integrity in that specific state. If files or directories are corrupted, set them to empty files or empty directories. The corrupted paths will be reported, so that the user can recover them from somewhere else. Running the following command repairs all the libraries: cd seafile-server-latest ./seaf-fsck.sh --repair Most of time you run the read-only integrity check first, to find out which libraries are corrupted. And then you repair specific libraries with the following command: cd seafile-server-latest ./seaf-fsck.sh --repair [library-id1] [library-id2] ... After repairing, in the library history, seaf-fsck includes the list of files and folders that are corrupted. So it's much easier to located corrupted paths.","title":"Repairing Corruption"},{"location":"maintain/seafile_fsck/#best-practice-for-repairing-a-library","text":"To check all libraries and find out which library is corrupted, the system admin can run seaf-fsck.sh without any argument and save the output to a log file. Search for keyword \"Fail\" in the log file to locate corrupted libraries. You can run seaf-fsck to check all libraries when your Seafile server is running. It won't damage or change any files. When the system admin find a library is corrupted, he/she should run seaf-fsck.sh with \"--repair\" for the library. After the command fixes the library, the admin should inform user to recover files from other places. There are two ways: Upload corrupted files or folders via the web interface If the library was synced to some desktop computer, and that computer has a correct version of the corrupted file, resyncing the library on that computer will upload the corrupted files to the server.","title":"Best Practice for Repairing a Library"},{"location":"maintain/seafile_fsck/#exporting-libraries-to-file-system","text":"Since version 4.2.0, you can use seaf-fsck to export all the files in libraries to external file system (such as Ext4). This procedure doesn't rely on the seafile database. As long as you have your seafile-data directory, you can always export your files from Seafile to external file system. The command syntax is cd seafile-server-latest ./seaf-fsck.sh --export top_export_path [library-id1] [library-id2] ... The argument top_export_path is a directory to place the exported files. Each library will be exported as a sub-directory of the export path. If you don't specify library ids, all libraries will be exported. Currently only un-encrypted libraries can be exported. Encrypted libraries will be skipped.","title":"Exporting Libraries to File System"},{"location":"maintain/seafile_gc/","text":"Seafile GC \u00b6 Seafile uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a library. As a result, the number of unused data blocks will increase on Seafile server. To release the storage space occupied by unused blocks, you have to run a \"garbage collection\" program to clean up unused blocks on your server. The GC program cleans up two types of unused blocks: Blocks that no library references to, that is, the blocks belong to deleted libraries; If you set history length limit on some libraries, the out-dated blocks in those libraries will also be removed. Before running GC, you must shutdown the Seafile program on your server if you use the community edition. For professional edition, from version 3.1.11, online GC operation is supported. If you use Professional edition, you don't need to shutdown the Seafile program if you are using MySQL or PostgreSQL as database. This is because new blocks written into Seafile while GC is running may be mistakenly deleted by the GC program. Community version - GC cleanup Script At the bottom of the page there is a script that you can use to run the cleanup manually or e.g. once a week with as cronjob. Run GC in version 4.1.1 and later \u00b6 In community edition 4.1.1 and Pro edition 4.1.0, GC program's command line and output are improved. Dry-run Mode \u00b6 To see how much garbage can be collected without actually removing any garbage, use the dry-run option: seaf-gc.sh --dry-run [repo-id1] [repo-id2] ... The output should look like: [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo My Library(ffa57d93) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 265. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo ffa57d93. [03/19/15 19:41:49] gc-core.c(308): Traversed 5 commits, 265 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 265 blocks total, about 265 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo aa(f3d0a8d0) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 5. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo f3d0a8d0. [03/19/15 19:41:49] gc-core.c(308): Traversed 8 commits, 5 blocks. [03/19/15 19:41:49] gc-core.c(264): Populating index for sub-repo 9217622a. [03/19/15 19:41:49] gc-core.c(308): Traversed 4 commits, 4 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 5 blocks total, about 9 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo test2(e7d26d93) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 507. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo e7d26d93. [03/19/15 19:41:49] gc-core.c(308): Traversed 577 commits, 507 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 507 blocks total, about 507 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:50] seafserv-gc.c(124): === Repos deleted by users === [03/19/15 19:41:50] seafserv-gc.c(145): === GC is finished === [03/19/15 19:41:50] Following repos have blocks to be removed: repo-id1 repo-id2 repo-id3 If you give specific library ids, only those libraries will be checked; otherwise all libraries will be checked. Notice that at the end of the output there is a \"repos have blocks to be removed\" section. It contains the list of librareis that have garbage blocks. Later when you run GC without --dry-run option, you can use these libraris ids as input arguments to GC program. Removing Garbage \u00b6 To actually remove garbage blocks, run without the --dry-run option: seaf-gc.sh [repo-id1] [repo-id2] ... If libraries ids are specified, only those libraries will be checked for garbage. As described before, there are two types of garbage blocks to be removed. Sometimes just removing the first type of blocks (those that belong to deleted libraries) is good enough. In this case, the GC program won't bother to check the libraries for outdated historic blocks. The \"-r\" option implements this feature: seaf-gc.sh -r In Seafile version 4.1.1 and later, libraries deleted by the users are not immediately removed from the system. Instead, they're moved into a \"trash\" in the system admin page. Before they're cleared from the trash, their blocks won't be garbage collected. Using Multiple Threads in GC \u00b6 Since Pro server 5.1.0, you can specify the thread number in GC. By default, If storage backend is S3/Swift/Ceph, 10 threads are started to do the GC work. If storage backend is file system, only 1 thread is started. You can specify the thread number in with \"-t\" option. \"-t\" option can be used together with all other options. Each thread will do GC on one library. For example, the following command will use 20 threads to GC all libraries: seaf-gc.sh -t 20 Since the threads are concurrent, the output of each thread may mix with each others. Library ID is printed in each line of output. Run GC in older versions (before 4.1.1) \u00b6 To run GC program ./seaf-gc.sh run If you want to do sanity check before actually removing any data, you can use the --dry-run option ./seaf-gc.sh dry-run It will show you the total block number vs. the number of blocks to be removed. To check data integrity after running GC, you can use seaf-fsck GC cleanup script for Community Version \u00b6 To use this script you need: Setup the seafile-service file at '/etc/init.d/seafile-server' Files of seafile setup need to be owner by 'seafile:nogroup' or 'seafile:seafile' Run the script with sudo or as root Put the script into crontab of a root user Create the script file (change the location to your liking): touch /opt/haiwen/seafile/cleanupScript.sh Use your favorite text editor and paste the following code: #!/bin/bash ##### # Uncomment the following line if you rather want to run the script manually. # Display usage if the script is not run as root user # if [[ $USER != \"root\" ]]; then # echo \"This script must be run as root user!\" # exit 1 # fi # # echo \"Super User detected!!\" # read -p \"Press [ENTER] to start the procedure, this will stop the seafile server!!\" ##### # stop the server echo Stopping the Seafile-Server... systemctl stop seafile.service systemctl stop seahub.service echo Giving the server some time to shut down properly.... sleep 20 # run the cleanup echo Seafile cleanup started... sudo -u seafile $pathtoseafile/seafile-server-latest/seaf-gc.sh echo Giving the server some time.... sleep 10 # start the server again echo Starting the Seafile-Server... systemctl start seafile.service systemctl start seahub.service echo Seafile cleanup done! Make sure that the script has been given execution rights, to do that run this command. sudo chmod +x /path/to/yourscript.sh Then open crontab with the root user crontab -e Add the following line (change the location of your script accordingly!) 0 2 * * Sun / opt / haiwen / seafile / cleanupScript . sh The script will then run every Sunday at 2:00 AM. GC in the seafile docker container \u00b6 To perform garbage collection inside the seafile docker container, you must run the /scripts/gc.sh script. Simply run docker exec <whatever-your-seafile-container-is-called> /scripts/gc.sh .","title":"Seafile GC"},{"location":"maintain/seafile_gc/#seafile-gc","text":"Seafile uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a library. As a result, the number of unused data blocks will increase on Seafile server. To release the storage space occupied by unused blocks, you have to run a \"garbage collection\" program to clean up unused blocks on your server. The GC program cleans up two types of unused blocks: Blocks that no library references to, that is, the blocks belong to deleted libraries; If you set history length limit on some libraries, the out-dated blocks in those libraries will also be removed. Before running GC, you must shutdown the Seafile program on your server if you use the community edition. For professional edition, from version 3.1.11, online GC operation is supported. If you use Professional edition, you don't need to shutdown the Seafile program if you are using MySQL or PostgreSQL as database. This is because new blocks written into Seafile while GC is running may be mistakenly deleted by the GC program. Community version - GC cleanup Script At the bottom of the page there is a script that you can use to run the cleanup manually or e.g. once a week with as cronjob.","title":"Seafile GC"},{"location":"maintain/seafile_gc/#run-gc-in-version-411-and-later","text":"In community edition 4.1.1 and Pro edition 4.1.0, GC program's command line and output are improved.","title":"Run GC in version 4.1.1 and later"},{"location":"maintain/seafile_gc/#dry-run-mode","text":"To see how much garbage can be collected without actually removing any garbage, use the dry-run option: seaf-gc.sh --dry-run [repo-id1] [repo-id2] ... The output should look like: [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo My Library(ffa57d93) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 265. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo ffa57d93. [03/19/15 19:41:49] gc-core.c(308): Traversed 5 commits, 265 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 265 blocks total, about 265 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo aa(f3d0a8d0) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 5. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo f3d0a8d0. [03/19/15 19:41:49] gc-core.c(308): Traversed 8 commits, 5 blocks. [03/19/15 19:41:49] gc-core.c(264): Populating index for sub-repo 9217622a. [03/19/15 19:41:49] gc-core.c(308): Traversed 4 commits, 4 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 5 blocks total, about 9 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:49] seafserv-gc.c(115): GC version 1 repo test2(e7d26d93) [03/19/15 19:41:49] gc-core.c(394): GC started. Total block number is 507. [03/19/15 19:41:49] gc-core.c(75): GC index size is 1024 Byte. [03/19/15 19:41:49] gc-core.c(408): Populating index. [03/19/15 19:41:49] gc-core.c(262): Populating index for repo e7d26d93. [03/19/15 19:41:49] gc-core.c(308): Traversed 577 commits, 507 blocks. [03/19/15 19:41:49] gc-core.c(440): Scanning unused blocks. [03/19/15 19:41:49] gc-core.c(472): GC finished. 507 blocks total, about 507 reachable blocks, 0 blocks can be removed. [03/19/15 19:41:50] seafserv-gc.c(124): === Repos deleted by users === [03/19/15 19:41:50] seafserv-gc.c(145): === GC is finished === [03/19/15 19:41:50] Following repos have blocks to be removed: repo-id1 repo-id2 repo-id3 If you give specific library ids, only those libraries will be checked; otherwise all libraries will be checked. Notice that at the end of the output there is a \"repos have blocks to be removed\" section. It contains the list of librareis that have garbage blocks. Later when you run GC without --dry-run option, you can use these libraris ids as input arguments to GC program.","title":"Dry-run Mode"},{"location":"maintain/seafile_gc/#removing-garbage","text":"To actually remove garbage blocks, run without the --dry-run option: seaf-gc.sh [repo-id1] [repo-id2] ... If libraries ids are specified, only those libraries will be checked for garbage. As described before, there are two types of garbage blocks to be removed. Sometimes just removing the first type of blocks (those that belong to deleted libraries) is good enough. In this case, the GC program won't bother to check the libraries for outdated historic blocks. The \"-r\" option implements this feature: seaf-gc.sh -r In Seafile version 4.1.1 and later, libraries deleted by the users are not immediately removed from the system. Instead, they're moved into a \"trash\" in the system admin page. Before they're cleared from the trash, their blocks won't be garbage collected.","title":"Removing Garbage"},{"location":"maintain/seafile_gc/#using-multiple-threads-in-gc","text":"Since Pro server 5.1.0, you can specify the thread number in GC. By default, If storage backend is S3/Swift/Ceph, 10 threads are started to do the GC work. If storage backend is file system, only 1 thread is started. You can specify the thread number in with \"-t\" option. \"-t\" option can be used together with all other options. Each thread will do GC on one library. For example, the following command will use 20 threads to GC all libraries: seaf-gc.sh -t 20 Since the threads are concurrent, the output of each thread may mix with each others. Library ID is printed in each line of output.","title":"Using Multiple Threads in GC"},{"location":"maintain/seafile_gc/#run-gc-in-older-versions-before-411","text":"To run GC program ./seaf-gc.sh run If you want to do sanity check before actually removing any data, you can use the --dry-run option ./seaf-gc.sh dry-run It will show you the total block number vs. the number of blocks to be removed. To check data integrity after running GC, you can use seaf-fsck","title":"Run GC in older versions (before 4.1.1)"},{"location":"maintain/seafile_gc/#gc-cleanup-script-for-community-version","text":"To use this script you need: Setup the seafile-service file at '/etc/init.d/seafile-server' Files of seafile setup need to be owner by 'seafile:nogroup' or 'seafile:seafile' Run the script with sudo or as root Put the script into crontab of a root user Create the script file (change the location to your liking): touch /opt/haiwen/seafile/cleanupScript.sh Use your favorite text editor and paste the following code: #!/bin/bash ##### # Uncomment the following line if you rather want to run the script manually. # Display usage if the script is not run as root user # if [[ $USER != \"root\" ]]; then # echo \"This script must be run as root user!\" # exit 1 # fi # # echo \"Super User detected!!\" # read -p \"Press [ENTER] to start the procedure, this will stop the seafile server!!\" ##### # stop the server echo Stopping the Seafile-Server... systemctl stop seafile.service systemctl stop seahub.service echo Giving the server some time to shut down properly.... sleep 20 # run the cleanup echo Seafile cleanup started... sudo -u seafile $pathtoseafile/seafile-server-latest/seaf-gc.sh echo Giving the server some time.... sleep 10 # start the server again echo Starting the Seafile-Server... systemctl start seafile.service systemctl start seahub.service echo Seafile cleanup done! Make sure that the script has been given execution rights, to do that run this command. sudo chmod +x /path/to/yourscript.sh Then open crontab with the root user crontab -e Add the following line (change the location of your script accordingly!) 0 2 * * Sun / opt / haiwen / seafile / cleanupScript . sh The script will then run every Sunday at 2:00 AM.","title":"GC cleanup script for Community Version"},{"location":"maintain/seafile_gc/#gc-in-the-seafile-docker-container","text":"To perform garbage collection inside the seafile docker container, you must run the /scripts/gc.sh script. Simply run docker exec <whatever-your-seafile-container-is-called> /scripts/gc.sh .","title":"GC in the seafile docker container"},{"location":"upgrade/extra-upgrade-notice/","text":"Extra upgrade notice \u00b6 2.3 \u00b6 In 2.3 version, we made a small change to dtable-db configuration. If you're upgrading from older versions, you have to manually add below option to conf/dtable-db.conf: [general] ...... log_dir = /shared/seatable/logs ...... It's also suggested to change the total_cache_size option to a larger value (e.g. 500MB, depending on how much memory you have): [dtable cache] ...... total_cache_size = 500 ...... You also need to add access information to dtable-server MySQL database. (You have to change below options based on your conf/dtable-server.json) [database] host = 127.0.0.1 user = root password = mypass db_name = dtable Add DTABLE_DB_URL to dtable_web_settings.py DTABLE_DB_URL = 'https://<your-domain>/dtable-db/' Add dtable-db configuration to nginx.conf location /dtable-db/ { proxy_pass http://127.0.0.1:7777/; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Forwarded-Proto $scheme; access_log /opt/nginx-logs/dtable-db.access.log seatableformat; error_log /opt/nginx-logs/dtable-db.error.log; } 2.1 \u00b6 2.1 add another component dtable-db, which is used to provide SQL query API (more features will be provided based on this component). For newly installation, the config file will be generated automatically. For upgrade from 2.0, you need to add the config file manully. Add a new file conf/dtable-db.conf with the following contents and modify private_key according to your instance: [general] host = 127.0.0.1 port = 7777 [storage] data_dir = /opt/seatable/db-data [dtable cache] private_key = \"my private key\" dtable_server_url = \"http://127.0.0.1:5000\" expire_time = 600 total_cache_size = 1 clean_cache_interval = 300 The value of private_key should be the same as the value in dtable_server_config.json . dtable_server_url should be http://127.0.0.1:5000. You don't need to modify the value.","title":"Extra upgrade notices"},{"location":"upgrade/extra-upgrade-notice/#extra-upgrade-notice","text":"","title":"Extra upgrade notice"},{"location":"upgrade/extra-upgrade-notice/#23","text":"In 2.3 version, we made a small change to dtable-db configuration. If you're upgrading from older versions, you have to manually add below option to conf/dtable-db.conf: [general] ...... log_dir = /shared/seatable/logs ...... It's also suggested to change the total_cache_size option to a larger value (e.g. 500MB, depending on how much memory you have): [dtable cache] ...... total_cache_size = 500 ...... You also need to add access information to dtable-server MySQL database. (You have to change below options based on your conf/dtable-server.json) [database] host = 127.0.0.1 user = root password = mypass db_name = dtable Add DTABLE_DB_URL to dtable_web_settings.py DTABLE_DB_URL = 'https://<your-domain>/dtable-db/' Add dtable-db configuration to nginx.conf location /dtable-db/ { proxy_pass http://127.0.0.1:7777/; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Forwarded-Proto $scheme; access_log /opt/nginx-logs/dtable-db.access.log seatableformat; error_log /opt/nginx-logs/dtable-db.error.log; }","title":"2.3"},{"location":"upgrade/extra-upgrade-notice/#21","text":"2.1 add another component dtable-db, which is used to provide SQL query API (more features will be provided based on this component). For newly installation, the config file will be generated automatically. For upgrade from 2.0, you need to add the config file manully. Add a new file conf/dtable-db.conf with the following contents and modify private_key according to your instance: [general] host = 127.0.0.1 port = 7777 [storage] data_dir = /opt/seatable/db-data [dtable cache] private_key = \"my private key\" dtable_server_url = \"http://127.0.0.1:5000\" expire_time = 600 total_cache_size = 1 clean_cache_interval = 300 The value of private_key should be the same as the value in dtable_server_config.json . dtable_server_url should be http://127.0.0.1:5000. You don't need to modify the value.","title":"2.1"},{"location":"upgrade/upgrade_manual/","text":"Upgrade manual \u00b6 In general, to upgrade to a new version, you need to Pull a new docker image version Stop the service and do the database migration manually Restart the service If there are extra notes for a specific version, you can find it here: extra notices Get latest SeaTable \u00b6 You can find all versions of SeaTable from Docker Hub . Run the following command to get the latest version of Seatable. docker pull seatable/seatable:{tag} Stop the currently running SeaTable container. docker-compose down Then modify SeaTable version in \"docker-compose.yml\". And start a new SeaTable container. docker-compose up -d Upgrade database \u00b6 Major or minor version upgrade \u00b6 Major version upgrade, like from 1.x to 2.x, and minor version upgrade, like from 1.1.x to 1.2.x, involve database changes. You need to manually change the database like following: docker exec -it seatable /bin/bash # Login to the SeaTable container. Then execute the upgrade statement mysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db </opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.1/dtable.sql mysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db </opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.2/dtable.sql If you upgrade several versions at once, just run all the database upgrade statement one by one, starting from the lowest version. Tiny version upgrade \u00b6 Tiny version upgrade, like from 1.0.1 to 1.0.2, does not involve database changes. Start SeaTable server \u00b6 Now you can start the SeaTable service. Execute the following command in the host server: docker exec -d seatable /shared/seatable/scripts/seatable.sh start","title":"Upgrade manual"},{"location":"upgrade/upgrade_manual/#upgrade-manual","text":"In general, to upgrade to a new version, you need to Pull a new docker image version Stop the service and do the database migration manually Restart the service If there are extra notes for a specific version, you can find it here: extra notices","title":"Upgrade manual"},{"location":"upgrade/upgrade_manual/#get-latest-seatable","text":"You can find all versions of SeaTable from Docker Hub . Run the following command to get the latest version of Seatable. docker pull seatable/seatable:{tag} Stop the currently running SeaTable container. docker-compose down Then modify SeaTable version in \"docker-compose.yml\". And start a new SeaTable container. docker-compose up -d","title":"Get latest SeaTable"},{"location":"upgrade/upgrade_manual/#upgrade-database","text":"","title":"Upgrade database"},{"location":"upgrade/upgrade_manual/#major-or-minor-version-upgrade","text":"Major version upgrade, like from 1.x to 2.x, and minor version upgrade, like from 1.1.x to 1.2.x, involve database changes. You need to manually change the database like following: docker exec -it seatable /bin/bash # Login to the SeaTable container. Then execute the upgrade statement mysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db </opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.1/dtable.sql mysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db </opt/seatable/seatable-server-latest/sql/mysql/upgrade/1.2/dtable.sql If you upgrade several versions at once, just run all the database upgrade statement one by one, starting from the lowest version.","title":"Major or minor version upgrade"},{"location":"upgrade/upgrade_manual/#tiny-version-upgrade","text":"Tiny version upgrade, like from 1.0.1 to 1.0.2, does not involve database changes.","title":"Tiny version upgrade"},{"location":"upgrade/upgrade_manual/#start-seatable-server","text":"Now you can start the SeaTable service. Execute the following command in the host server: docker exec -d seatable /shared/seatable/scripts/seatable.sh start","title":"Start SeaTable server"}]}